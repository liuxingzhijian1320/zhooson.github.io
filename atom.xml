<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>钱端攻城狮</title>
  
  <subtitle>学无止境</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://alex.zhooson.cn/"/>
  <updated>2018-07-31T02:06:37.000Z</updated>
  <id>http://alex.zhooson.cn/</id>
  
  <author>
    <name>张沪生</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>线条动画</title>
    <link href="http://alex.zhooson.cn/2018/07/13/css-line-animation-1/"/>
    <id>http://alex.zhooson.cn/2018/07/13/css-line-animation-1/</id>
    <published>2018-07-13T06:07:08.000Z</published>
    <updated>2018-07-31T02:06:37.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li>动画的预览<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2018/07/13/css-line-animation-1/1.gif" alt="这里写图片描述" title="">                </div>                <div class="image-caption">这里写图片描述</div>            </figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;鼠标移入下划线展开&lt;/title&gt;</span><br><span class="line">    &lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">        #line &#123;</span><br><span class="line">            width: 500px;</span><br><span class="line">            height: 50px;</span><br><span class="line">            background: gray;</span><br><span class="line">            margin: 20px auto;</span><br><span class="line">            position: relative;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        #line:after &#123;</span><br><span class="line">            content: &quot;&quot;;</span><br><span class="line">            width: 0;</span><br><span class="line">            height: 3px;</span><br><span class="line">            background: red;</span><br><span class="line">            position: absolute;</span><br><span class="line">            top: 100%;</span><br><span class="line">            left: 50%;</span><br><span class="line">            transition: all .5s;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        #line:hover:after &#123;</span><br><span class="line">            left: 0%;</span><br><span class="line">            width: 100%;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div id=&quot;line&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;动画的预览&lt;figure class=&quot;image-bubble&quot;&gt;
                &lt;div class=&quot;img-lightbox&quot;&gt;
                    &lt;div class=&quot;overlay&quot;&gt;&lt;/div&gt;
     
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>多条件和模糊搜索</title>
    <link href="http://alex.zhooson.cn/2018/07/11/search/"/>
    <id>http://alex.zhooson.cn/2018/07/11/search/</id>
    <published>2018-07-11T08:33:16.000Z</published>
    <updated>2018-07-11T08:34:56.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li>html</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;content&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;right&quot;&gt;</span><br><span class="line"></span><br><span class="line">      &lt;select name=&quot;sex&quot; width=&apos;100&apos; v-model=&quot;formData.sex&quot;&gt;</span><br><span class="line">        &lt;option value=&quot;&quot; selected&gt;请选择&lt;/option&gt;</span><br><span class="line">        &lt;option value=&quot;1&quot;&gt;男&lt;/option&gt;</span><br><span class="line">        &lt;option value=&quot;2&quot;&gt;女&lt;/option&gt;</span><br><span class="line">        &lt;option value=&quot;3&quot;&gt;不是人&lt;/option&gt;</span><br><span class="line">      &lt;/select&gt;</span><br><span class="line"></span><br><span class="line">      &lt;input type=&quot;text&quot; v-model=&quot;formData.phone&quot; placeholder=&quot;电话(精准搜索)&quot;&gt;</span><br><span class="line"></span><br><span class="line">      &lt;input type=&quot;text&quot; v-model=&quot;formData.name&quot; placeholder=&quot;姓名(模糊搜索)&quot;&gt;</span><br><span class="line"></span><br><span class="line">      &lt;button @click=&quot;search(formData)&quot;&gt;提交数据&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;left&quot;&gt;</span><br><span class="line">      &lt;ul&gt;</span><br><span class="line">        &lt;li v-for=&quot;(item,index) in  realList&quot; :key=&quot;index&quot;&gt;</span><br><span class="line">          &#123;&#123;item.name&#125;&#125; || &#123;&#123;item.phone&#125;&#125; || &#123;&#123;item.sex | filterSex&#125;&#125;</span><br><span class="line">        &lt;/li&gt;</span><br><span class="line">      &lt;/ul&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br></pre></td></tr></table></figure><ul><li>js</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line">export default &#123;</span><br><span class="line">  name: &apos;styleTest&apos;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      formData: &#123;</span><br><span class="line">        name: &apos;&apos;,</span><br><span class="line">        phone: &apos;&apos;,</span><br><span class="line">        sex: &apos;&apos;,</span><br><span class="line">      &#125;,</span><br><span class="line">      realList: [],</span><br><span class="line">      list: [</span><br><span class="line">        &#123;</span><br><span class="line">          name: &apos;张址&apos;,</span><br><span class="line">          phone: 18715023011,</span><br><span class="line">          sex: 1,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          name: &apos;张三&apos;,</span><br><span class="line">          phone: 18715023012,</span><br><span class="line">          sex: 2,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          name: &apos;李四&apos;,</span><br><span class="line">          phone: 18715023013,</span><br><span class="line">          sex: 1,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          name: &apos;赵武&apos;,</span><br><span class="line">          phone: 18715023014,</span><br><span class="line">          sex: 2,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          name: &apos;晋南&apos;,</span><br><span class="line">          phone: 18715023015,</span><br><span class="line">          sex: 1,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          name: &apos;张东&apos;,</span><br><span class="line">          phone: 18715023016,</span><br><span class="line">          sex: 2,</span><br><span class="line">        &#125;,</span><br><span class="line">      ],</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  filters: &#123;</span><br><span class="line">    filterSex(val) &#123;</span><br><span class="line">      switch (val) &#123;</span><br><span class="line">        case 1:</span><br><span class="line">          return &apos;男&apos;;</span><br><span class="line">          break;</span><br><span class="line">        case 2:</span><br><span class="line">          return &apos;女&apos;;</span><br><span class="line">          break;</span><br><span class="line">        case 3:</span><br><span class="line">          return &apos;不是人&apos;;</span><br><span class="line">          break;</span><br><span class="line">        default:</span><br><span class="line">          return &apos;男&apos;;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    // realList() &#123;</span><br><span class="line">    //   let &#123; name, phone, sex &#125; = this.formData;</span><br><span class="line">    //   if (name &amp;&amp; phone &amp;&amp; sex) &#123;</span><br><span class="line">    //     return this.list;</span><br><span class="line">    //   &#125;</span><br><span class="line">    // &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  created() &#123;</span><br><span class="line">    this.search(&#123;&#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    search(&#123; name, phone, sex &#125;) &#123;</span><br><span class="line">      this.realList = this.list.filter(item =&gt; &#123;</span><br><span class="line">        let matchName = true; // 姓名 筛选</span><br><span class="line">        let matchSex = true; // 性别 筛选</span><br><span class="line">        let matchPhone = true; // 号码 筛选</span><br><span class="line"></span><br><span class="line">        if (sex) &#123;</span><br><span class="line">          matchSex = item.sex == sex;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (phone) &#123;</span><br><span class="line">          // console.info(Object.prototype.toString.call(phone));</span><br><span class="line">          matchPhone = item.phone == phone;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (name) &#123;</span><br><span class="line">          // 模糊搜索;</span><br><span class="line">          const keys = name</span><br><span class="line">            .toUpperCase() // 转大写</span><br><span class="line">            .replace(&apos; &apos;, &apos;&apos;) // 删掉空格</span><br><span class="line">            .split(&apos;&apos;); // 切割成 单个字</span><br><span class="line"></span><br><span class="line">          matchName = keys.every(key =&gt; item.name.toUpperCase().includes(key));</span><br><span class="line">        &#125;</span><br><span class="line">        return matchName &amp;&amp; matchPhone &amp;&amp; matchSex;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;html&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>滚动到某个区域实现动画</title>
    <link href="http://alex.zhooson.cn/2018/07/09/windowScroll/"/>
    <id>http://alex.zhooson.cn/2018/07/09/windowScroll/</id>
    <published>2018-07-09T03:47:15.000Z</published>
    <updated>2018-07-09T03:54:49.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</span><br><span class="line">    &lt;title&gt;滚动到某个区域实现动画&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">    * &#123;</span><br><span class="line">        margin: 0;</span><br><span class="line">        padding: 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .header &#123;</span><br><span class="line">        height: 1000px;</span><br><span class="line">        background: red;</span><br><span class="line">        width: 100%;</span><br><span class="line">        opacity: 0.2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .footer &#123;</span><br><span class="line">        height: 200px;</span><br><span class="line">        background: gray;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .animated &#123;</span><br><span class="line">        background: red;</span><br><span class="line">        transition: all 1s linear;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;header class=&quot;header&quot;&gt;&lt;/header&gt;</span><br><span class="line">    &lt;footer class=&quot;footer&quot; id=&quot;footer&quot;&gt;&lt;/footer&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    (function() &#123;</span><br><span class="line">        var footerDiv = document.getElementById(&quot;footer&quot;);</span><br><span class="line">        var footerHeight = footerDiv.offsetHeight;</span><br><span class="line">        window.addEventListener(&apos;scroll&apos;, () =&gt; &#123;</span><br><span class="line">          // 兼容的写法</span><br><span class="line">            var scrollTop = document.documentElement.scrollTop || window.pageYOffset || document.body.scrollTop;</span><br><span class="line">            console.info(&apos;文档高度&apos; + document.body.offsetHeight, scrollTop, window.innerHeight)</span><br><span class="line">                //判断是否滚动到底部</span><br><span class="line">            if (scrollTop + window.innerHeight + 0 + footerHeight &gt;= document.body.offsetHeight) &#123; //0 表示距离底部多少的距离的开始触发loadmore效果</span><br><span class="line">                console.info(&apos;我要开始做动画片来&apos;)</span><br><span class="line">                footerDiv.classList.add(&quot;animated&quot;);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                footerDiv.classList.remove(&quot;animated&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;)()</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><blockquote><p>classList <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Element/classList" target="_blank" rel="noopener">MDN</a><br>scrollTop 的兼容写法 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Element/scrollTop" target="_blank" rel="noopener">MDN</a><br>[can i use] (<a href="https://caniuse.com/#search=classList" target="_blank" rel="noopener">https://caniuse.com/#search=classList</a>)</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>前端面试题</title>
    <link href="http://alex.zhooson.cn/2018/06/29/interview/"/>
    <id>http://alex.zhooson.cn/2018/06/29/interview/</id>
    <published>2018-06-29T05:49:48.000Z</published>
    <updated>2018-07-20T06:25:27.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="javascript"><a href="#javascript" class="headerlink" title="javascript"></a>javascript</h2><h3 id="1-数据类型（如何准确判断出来类型）"><a href="#1-数据类型（如何准确判断出来类型）" class="headerlink" title="1. 数据类型（如何准确判断出来类型）"></a>1. 数据类型（如何准确判断出来类型）</h3><blockquote><p> 备注： ES6 引入了一种新的原始数据类型Symbol，表示独一无二的值。</p></blockquote><blockquote><p>基本数据类型： string,number,boolean,null,undefined</p></blockquote><blockquote><p>引用类型： Function,Array,Object</p></blockquote><table><thead><tr><th>访问</th><th>方式</th></tr></thead><tbody><tr><td>基本类型</td><td>引用类型</td></tr><tr><td>操作和保存在变量的实际的值</td><td>值保存在内存中，js不允许直接访问内存，在操作的时候，操作的是对象的引用</td></tr><tr><td>保存在栈区</td><td>引用存放在栈区，实际对象保存在堆区</td></tr></tbody></table><ul><li>typeof 主要用于判断数据是不是基本数据类型：String、Number、Object、Null、Undefined，但是无法判断出function（有些浏览器会出错）、array、regExp</li><li>instanceof主要的目的是用来检测引用类型，判断Array和RegExp，无法准确判断Function</li><li>Object.prototype.toString是对象的一个原生原型扩展函数，用来精确的区分数据类型</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">typeof null // object</span><br><span class="line"></span><br><span class="line">1.var type=Object.prototype.toString</span><br><span class="line">2.console.log(type.call(&apos;&apos;));//object String</span><br><span class="line">3.console.log(type.call([]));//object Array</span><br><span class="line">4.console.log(type.call(&#123;&#125;));//object Object</span><br><span class="line">5.console.log(type.call(false));//object Boolean</span><br><span class="line">6.console.log(type.call(null));//object Null</span><br><span class="line">7.console.log(type.call(undefined));//object Undefined</span><br><span class="line">8.console.log(type.call(function()&#123;&#125;));//object Function</span><br><span class="line">9....</span><br><span class="line">console.log(type.call(&apos;&apos;)==&quot;[object String]&quot;);//true</span><br></pre></td></tr></table></figure><h3 id="2-数组去重"><a href="#2-数组去重" class="headerlink" title="2.数组去重"></a>2.数组去重</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var arr = [1,2,3,4,5,4,3,2,2,1,2,3,4,5,6,6,4,3]</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">[...new Set(arr)] // es6的方法</span><br><span class="line"></span><br><span class="line">// 方法二</span><br><span class="line">function unique(arr) &#123;</span><br><span class="line">    var res = [],</span><br><span class="line">        json = &#123;&#125;;</span><br><span class="line">    for (var i = 0; i &lt; arr.length; i++) &#123;</span><br><span class="line">        if (!json[arr[i]]) &#123;</span><br><span class="line">            res.push(arr[i])</span><br><span class="line">            json[arr[i]] = 1</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return res</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> // 方法三</span><br><span class="line"> function unique(arr) &#123;</span><br><span class="line">    var res = [];</span><br><span class="line">    for (var i = 0; i &lt; arr.length; i++) &#123;</span><br><span class="line">        if (res.indexOf(arr[i]) == -1) &#123;</span><br><span class="line">            res.push(arr[i])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return res</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 方法四 （缺点全部变成字符串）</span><br><span class="line">function unique(arr) &#123;</span><br><span class="line">    var json = &#123;&#125;</span><br><span class="line">    arr.forEach(value =&gt; &#123;</span><br><span class="line">        json[value] = 1</span><br><span class="line">    &#125;);</span><br><span class="line">    return Object.keys(json)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-冒泡排序"><a href="#3-冒泡排序" class="headerlink" title="3.冒泡排序"></a>3.冒泡排序</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">var arr = [1, 4, 7, 8, 5, 3, 0, 6, 8, 5, 4, 3, 4, 6, 8]</span><br><span class="line"></span><br><span class="line">function debunce(arr) &#123;</span><br><span class="line">    var len = arr.length;</span><br><span class="line">    for (var i = 0; i &lt; len; i++) &#123;</span><br><span class="line">        for (var j = 0; j &lt; len - i - 1; j++) &#123;</span><br><span class="line">            if (arr[j] &gt; arr[j + 1]) &#123;</span><br><span class="line">                var tmp = arr[j + 1];</span><br><span class="line">                arr[j + 1] = arr[j]</span><br><span class="line">                arr[j] = tmp</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return arr</span><br><span class="line">&#125;</span><br><span class="line">debunce(arr)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// sort 的排序方法</span><br><span class="line">arr.sort((a,b)=&gt;a-b)</span><br></pre></td></tr></table></figure><h3 id="4-节流函数-防抖"><a href="#4-节流函数-防抖" class="headerlink" title="4.节流函数 防抖"></a>4.节流函数 防抖</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">delay = (function() &#123;</span><br><span class="line">    var timer = null;</span><br><span class="line">    return function(callback, ms) &#123;</span><br><span class="line">        clearTimeout(timer);</span><br><span class="line">        timer = setTimeout(callback, ms)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line">//方法</span><br><span class="line">delay(function() &#123;</span><br><span class="line">    //....</span><br><span class="line">&#125;, 300);</span><br><span class="line"></span><br><span class="line">lodash.js 中的 _.debounce</span><br></pre></td></tr></table></figure><h3 id="5-统计字符串出现次数最多"><a href="#5-统计字符串出现次数最多" class="headerlink" title="5. 统计字符串出现次数最多"></a>5. 统计字符串出现次数最多</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">var str = &apos;dlkjsdgljkslasdjlkasjdaslhglsdjhgkfdjjasjasljfslfsdkgfhsdl&apos;;</span><br><span class="line"></span><br><span class="line">function cac(str) &#123;</span><br><span class="line">    var json = &#123;&#125;;</span><br><span class="line">    for (var i = 0; i &lt; str.length; i++) &#123;</span><br><span class="line">        if (!json[str.charAt(i)]) &#123;</span><br><span class="line">            json[str.charAt(i)] = 1</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            json[str.charAt(i)]++</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    var max = 0,</span><br><span class="line">        unit = &apos;&apos;;</span><br><span class="line">    for (var key in json) &#123;</span><br><span class="line">        if (json[key] &gt; max) &#123;</span><br><span class="line">            max = json[key];</span><br><span class="line">            unit = key</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    console.info(&apos;最多max&apos;, max, &apos;多少次unit&apos;, unit)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cac(str)</span><br></pre></td></tr></table></figure><h3 id="6-递归的函数"><a href="#6-递归的函数" class="headerlink" title="6. 递归的函数"></a>6. 递归的函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">// 递归</span><br><span class="line">function num(n) &#123;</span><br><span class="line">    if (n == 1) return 1</span><br><span class="line">    return num(n - 1) + n</span><br><span class="line">&#125;</span><br><span class="line">num(100)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">function factorial(num) &#123;</span><br><span class="line">    if (num &lt;= 1) &#123;</span><br><span class="line">        return 1;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        return num * arguments.callee(num - 1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-如何获取url上面的参数"><a href="#7-如何获取url上面的参数" class="headerlink" title="7. 如何获取url上面的参数"></a>7. 如何获取url上面的参数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// 如何获取url上面的参数</span><br><span class="line">var url = &quot;http://www.runoob.com/jquery/misc-trim.html?channelid=12333&amp;name=xiaoming&amp;age=23&quot;</span><br><span class="line">var foo = url.split(&apos;?&apos;)[1].split(&apos;&amp;&apos;); //[&quot;channelid=12333&quot;, &quot;name=xiaoming&quot;, &quot;age=23&quot;]</span><br><span class="line">var obj = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">for (var value of foo) &#123;</span><br><span class="line">    var key = value.split(&apos;=&apos;)[0]</span><br><span class="line">    var val = value.split(&apos;=&apos;)[1]</span><br><span class="line">    console.info(key, val)</span><br><span class="line">    obj[key] = val</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-js去除空格"><a href="#8-js去除空格" class="headerlink" title="8. js去除空格"></a>8. js去除空格</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var str = &apos; sf jj l &apos;</span><br><span class="line"></span><br><span class="line">// 全部 str.replace(/\s+/g, &apos;&apos;)</span><br><span class="line">// 2头 str.replace(/^\s*|\s*$/,&apos;&apos;)</span><br><span class="line">// 左边 str.replace(/^\s*/g, &apos;&apos;)</span><br><span class="line">// 左边 str.replace(/\s*$/g, &apos;&apos;)</span><br></pre></td></tr></table></figure><h3 id="9-this的理解"><a href="#9-this的理解" class="headerlink" title="9. this的理解"></a>9. this的理解</h3><p>参考文章 <a href="https://www.cnblogs.com/pssp/p/5216085.html" target="_blank" rel="noopener">追梦子this的介绍</a></p><h3 id="10-什么是闭包（写一个例子）"><a href="#10-什么是闭包（写一个例子）" class="headerlink" title="10. 什么是闭包（写一个例子）"></a>10. 什么是闭包（写一个例子）</h3><blockquote><p>可以访问其他函数内部的变量</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">funtion test()&#123;</span><br><span class="line">    var name = &apos;hello world&apos;</span><br><span class="line">    return name</span><br><span class="line">&#125;</span><br><span class="line">var text = test()  // hello world&apos;</span><br></pre></td></tr></table></figure><h3 id="11-apply-call-bind"><a href="#11-apply-call-bind" class="headerlink" title="11. apply call bind"></a>11. apply call bind</h3><p>参考文章 <a href="https://www.cnblogs.com/pssp/p/5215621.html" target="_blank" rel="noopener">JavaScript中call,apply,bind方法的总结。</a></p><h3 id="12-jsonp的原理"><a href="#12-jsonp的原理" class="headerlink" title="12. jsonp的原理"></a>12. jsonp的原理</h3><blockquote><p>只要协议、域名、端口有任何一个的不同，就被当作是跨域。</p><ul><li>JSONP</li><li>CORS</li><li>Server Proxy</li><li>location.hash</li><li>window.name</li><li>postMessage</li><li>document.domain</li></ul></blockquote><h3 id="13-堆栈的理解（深拷贝浅拷贝）"><a href="#13-堆栈的理解（深拷贝浅拷贝）" class="headerlink" title="13. 堆栈的理解（深拷贝浅拷贝）"></a>13. 堆栈的理解（深拷贝浅拷贝）</h3><blockquote><p>基本类型：undefined,null,Boolean,String,Number,Symbol<br>引用类型：Object,Array,Date,Function,RegExp等</p></blockquote> <font color="red">基本数据类型存放在栈中 基本数据类型值不可变。</font><blockquote><p>存放在栈内存中的简单数据段，数据大小确定，内存空间大小可以分配，是直接按值存放的，所以可以直接访问</p></blockquote><blockquote><p>基本数据类型的值是不可变的，动态修改了基本数据类型的值，它的原始值也是不会改变的，</p></blockquote><p><font color="red">引用类型存放在堆中 引用类型值可变</font></p><blockquote><p>引用类型（object）是存放在堆内存中的，变量实际上是一个存放在栈内存的指针，这个指针指向堆内存中的地址。每个空间大小不一样，要根据情况开进行特定的分配，</p></blockquote><p><font color="#00ced1">深拷贝 &amp; 浅拷贝</font></p><ul><li>浅拷贝：仅仅是复制了引用，彼此之间的操作会互相影响</li><li>深拷贝：在堆中重新分配内存，不同的地址，相同的值，互不影响</li></ul><h3 id="14-例举至少-3-种强制类型转换和-2-种隐式类型转换"><a href="#14-例举至少-3-种强制类型转换和-2-种隐式类型转换" class="headerlink" title="14. 例举至少 3 种强制类型转换和 2 种隐式类型转换?"></a>14. 例举至少 3 种强制类型转换和 2 种隐式类型转换?</h3><ul><li>三种强制类型转换：String()，Boolean()，Number()；(parseInt和parseFloat)</li><li>2种隐式类型：+和-</li></ul><h3 id="15-请简述-AJAX-及基本步骤-优缺点"><a href="#15-请简述-AJAX-及基本步骤-优缺点" class="headerlink" title="15. 请简述 AJAX 及基本步骤, 优缺点"></a>15. 请简述 AJAX 及基本步骤, 优缺点</h3><ul><li>优点</li></ul><blockquote><ol><li>最大的一点是页面无刷新，在页面内与服务器通信，给用户的体验非常好。</li></ol></blockquote><blockquote><ol start="2"><li>使用异步方式与服务器通信，不需要打断用户的操作，具有更加迅速的响应能力。</li></ol></blockquote><blockquote><ol start="3"><li>可以把以前一些服务器负担的工作转嫁到客户端，利用客户端闲置的能力来处理，减轻服务器和带宽的负担，节约空间和宽带租用成本。并且减轻服务器的负担，ajax的原则是“按需取数据”，可以最大程度的减少冗余请求，和响应对服务器造成的负担。</li></ol></blockquote><ul><li>缺点<blockquote><p>ajax干掉了back按钮，即对浏览器后退机制的破坏。<br>安全问题<br>对搜索引擎的支持比较弱。</p></blockquote></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">window.onload = function() &#123;</span><br><span class="line">    //1.获取a节点，并为其添加onclick响应函数</span><br><span class="line">    document.getElementsByTagName(&quot;a&quot;)[0].onclick = function() &#123;</span><br><span class="line">        //2创建一个XMLHttpRequest对象</span><br><span class="line">        var request = new XMLHttpRequest();</span><br><span class="line">        //3准备发送请求的url</span><br><span class="line">        var url = this.href;</span><br><span class="line">        var method = &quot;GET&quot;;</span><br><span class="line">        //4.调用XMLHttpRequest对象的open方法</span><br><span class="line">        request.open(method, url);</span><br><span class="line">        //6.调用XMLHttpRequest对象的send方法</span><br><span class="line">        request.send(null);</span><br><span class="line">        request.onreadystatechange = function() &#123;</span><br><span class="line">            //7.判断响应是否完成：XMLHttpRequest对象的readyState属性为4的时候</span><br><span class="line">            if (request.readyState == 4) &#123;</span><br><span class="line">                //8.再判断响应式是否可用：XMLHttpRequest对象status属性值为200</span><br><span class="line">                if (request.status == 200 || request.status == 304) &#123;</span><br><span class="line">                    // 9. 打印结果</span><br><span class="line">                    alert(request.responseText);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="16-同步和异步的区别"><a href="#16-同步和异步的区别" class="headerlink" title="16.同步和异步的区别?"></a>16.同步和异步的区别?</h3><blockquote><p>同步是阻塞模式，异步是非阻塞模式。</p></blockquote><ul><li><p>同步就是指一个进程在执行某个请求的时候，若该请求需要一段时间才能返回信息，那么这个进程将会一直等待下去，知道收到返回信息才继续执行下去；</p></li><li><p>异步是指进程不需要一直等下去，而是继续执行下面的操作，不管其他进程的状态。当有消息返回式系统会通知进程进行处理，这样可以提高执行的效率。</p></li></ul><h3 id="17-sessionStorage和localstroage与cookie之间有什么关联"><a href="#17-sessionStorage和localstroage与cookie之间有什么关联" class="headerlink" title="17. sessionStorage和localstroage与cookie之间有什么关联"></a>17. sessionStorage和localstroage与cookie之间有什么关联</h3><blockquote><p>sessionStorage对象</p><ul><li>sessionStorage 对象是存储特定于某个会话的数据，当页面被重新加载时其仍然存在，只有当浏览器被关闭或者当前页面被关闭时，数据才会被清除；可以理解为数据被存储在浏览器中，只有浏览器被关闭后，数据才会被清除，同时，如果浏览器支持，在浏览器崩溃并重启之后仍然可以访问存储与sessionStorage中的数据</li></ul></blockquote><p><a href="https://www.cnblogs.com/cherryshuang/p/8545681.html" target="_blank" rel="noopener">https://www.cnblogs.com/cherryshuang/p/8545681.html</a></p><h3 id="18-setTimeout-和-promiae的执行顺序"><a href="#18-setTimeout-和-promiae的执行顺序" class="headerlink" title="18.setTimeout 和 promiae的执行顺序"></a>18.setTimeout 和 promiae的执行顺序</h3><ul><li>promise.Trick()&gt;promise的回调&gt;setTimeout&gt;setImmediate</li><li>Promise的任务会在当前事件循环末尾中执行，而setTimeout中的任务是在下一次事件循环执行</li><li>从规范上来讲，setTimeout有一个4ms的最短时间，也就是说不管你设定多少，反正最少都要间隔4ms才运行里面的回调（当然，浏览器有没有遵守这个规范是另外一回事儿）。而Promise的异步没有这个问题</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(() =&gt; &#123;</span><br><span class="line">    console.log(1)</span><br><span class="line">&#125;, 0);</span><br><span class="line"></span><br><span class="line">new Promise((resolve) =&gt; &#123;</span><br><span class="line">    console.log(2)</span><br><span class="line">    for (var i = 0; i &lt; 10000; i++) &#123;</span><br><span class="line">        i == 9999 &amp;&amp; resolve()</span><br><span class="line">    &#125;</span><br><span class="line">    console.log(3)</span><br><span class="line">&#125;).then(() =&gt; &#123;</span><br><span class="line">    console.log(4)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">console.log(5); // 2 3 5 4 1</span><br></pre></td></tr></table></figure><h3 id="19-如何实现滚动加载的数据"><a href="#19-如何实现滚动加载的数据" class="headerlink" title="19. 如何实现滚动加载的数据"></a>19. 如何实现滚动加载的数据</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">  // 注册scroll事件并监听</span><br><span class="line">  window.addEventListener(&apos;scroll&apos;, () =&gt; &#123;</span><br><span class="line">    console.info(&apos;可视区域大小&apos; + document.documentElement.clientHeight + &apos;........&apos; + window.innerHeight)</span><br><span class="line">    //console.info(&apos;滚动高度&apos; + document.body.scrollTop) //原生的方法存在的兼容性问题 mac上面就计算出来是0</span><br><span class="line">    var scrollTop = document.documentElement.scrollTop || window.pageYOffset || document.body.scrollTop;</span><br><span class="line"></span><br><span class="line">    console.info(&apos;文档高度&apos; + document.body.offsetHeight)</span><br><span class="line"></span><br><span class="line">    //判断是否滚动到底部</span><br><span class="line">    if (scrollTop + window.innerHeight + 0&gt;= document.body.offsetHeight) &#123; //0 表示距离底部多少的距离的开始触发loadmore效果</span><br><span class="line">      if (!this.showlaoding) &#123; //防止多次加载</span><br><span class="line">        this.getData(this.page += 1)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  $(window).scroll(function () &#123;</span><br><span class="line">    var scrollTop = $(this).scrollTop();</span><br><span class="line">    var scrollHeight = $(document).height();</span><br><span class="line">    var windowHeight = $(this).height();</span><br><span class="line">    if (scrollTop + windowHeight == scrollHeight) &#123;</span><br><span class="line">       //异步加载数据的方法</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="20-seo和首屏加载方案"><a href="#20-seo和首屏加载方案" class="headerlink" title="20. seo和首屏加载方案"></a>20. seo和首屏加载方案</h3><ul><li><p>JavaScript外联文件引用放在html文档底部；CSS外联文件引用在html文档头部，位于header内；</p></li><li><p>http静态资源尽量用多个子域名；</p></li><li><p>服务器端提供html文档和http静态资源时，尽量开启gzip压缩；</p></li><li><p>在js，css，image等资源响应的http headers里，设置expires，last-modified；</p></li><li><p>尽量减少HTTP Requests的数量；</p></li><li><p>js/css的minify：可统一通过combo handler做到压缩加合并；</p></li><li><p>减少不必要的301/302跳转：别让页面打开时间浪费在302多次跳转上（每次可能几十毫秒）；</p></li><li><p>请大量使用CSS Spirtes：这样做可以大大地减少CSS背景图片的HTTP请求次数；</p></li><li><p>首屏不需要展示的较大尺寸图片，请使用lazyload；</p></li><li><p>图片无损压缩的优化；</p></li><li><p>避免404错误：尽量减少外联js；</p></li><li><p>减少cookies的大小：尽量减少cookies的体积对减少用户获得响应的时间十分重要；</p></li><li><p>使用无cookies的域；</p></li><li><p>减少DOM Elements的数量；</p></li><li><p>引入textarea/script元素做延迟解析异步渲染</p></li></ul><h3 id="21-数组的操作方案"><a href="#21-数组的操作方案" class="headerlink" title="21. 数组的操作方案"></a>21. 数组的操作方案</h3><ul><li>Array.join()方法，返回一个字符串</li><li>Array.reverse()方法，返回逆序数组</li><li>Array.sort()方法，返回排序后的数组。</li><li>Array.concat(),创建并返回一个新数组。</li><li>Array.slice()方法，返回指定数组的片段或者子数组。</li><li>Array.splice()方法，用来删除或插入元素，会修改原数组！</li><li>push()方法在数组的尾部添加一个或者多个元素，并返回数组的新长度。注意的是，改变的是原数组的值，返回的是新数组的长度。</li><li>pop()方法删除数组的最后一个元素，并返回它的删除值。也是改变原数组，返回的是删除的值。</li><li>unshift()方法类似于push()不同的是，他是在数组头部添加，其他都一样</li><li>shift()方法则类比pop()方法。</li><li>toString()方法将每个元素转化为字符串，类似于不传参的join()方法。</li><li>forEach()方法，从头至尾遍历数组，为每个元素调用指定的函数。</li><li>.filter()方法，返回的是调用数组的一个子集。</li><li>every()方法是只有数组中所以元素都满足某个条件才会返回true；</li><li>some()方法是只要有满足条件的值，就返回true。</li><li>indexOf()和lastIndexOf()</li></ul><h3 id="22-各种位置和高度计算-position-、-offset-、-outerHeight-、-scrollTop、-scrollHeight、-clientHeight"><a href="#22-各种位置和高度计算-position-、-offset-、-outerHeight-、-scrollTop、-scrollHeight、-clientHeight" class="headerlink" title="22. 各种位置和高度计算:.position()、.offset()、.outerHeight()、.scrollTop、.scrollHeight、.clientHeight"></a>22. 各种位置和高度计算:.position()、.offset()、.outerHeight()、.scrollTop、.scrollHeight、.clientHeight</h3><p><a href="https://blog.csdn.net/u012054869/article/details/52200052" target="_blank" rel="noopener">资料链接</a></p><h3 id="23-数组推平"><a href="#23-数组推平" class="headerlink" title="23. 数组推平"></a>23. 数组推平</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">var arr = [1,[2,3,[4,5,6]],[7,8],[9,9]]</span><br><span class="line"></span><br><span class="line">// 方法一</span><br><span class="line">arr.toString().split(&apos;,&apos;)</span><br><span class="line"></span><br><span class="line">// 方法二(缺点：只适合二位数组)</span><br><span class="line">[].concat(...arr)</span><br><span class="line"></span><br><span class="line">// 方法三</span><br><span class="line">function flatten(arr)&#123;</span><br><span class="line">    const flattened = [].concat(...arr)</span><br><span class="line">    return flattened.some(item=&gt;Array.isArray(item))?flatten(flattened):flattened</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="24-数组的最大值和最小值"><a href="#24-数组的最大值和最小值" class="headerlink" title="24. 数组的最大值和最小值"></a>24. 数组的最大值和最小值</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var arr=[1,2,3,4,5,6,10,7,9,11,20,19];</span><br><span class="line"></span><br><span class="line">alert(Math.min.apply(null,arr));//获取数组中最小值</span><br><span class="line"></span><br><span class="line">alert(Math.max.apply(null,arr));//获取数组中的最大值</span><br></pre></td></tr></table></figure><h3 id="25-原生js提交表单"><a href="#25-原生js提交表单" class="headerlink" title="25. 原生js提交表单"></a>25. 原生js提交表单</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;form class=&quot;form-signin&quot; id=&quot;myform&quot; method=&quot;POST&quot; action=&quot;/admin/login&quot;&gt;</span><br><span class="line"></span><br><span class="line">//拿到form</span><br><span class="line">    var form = document.getElementById(&quot;myform&quot;)</span><br><span class="line"></span><br><span class="line">    function submitFormData()&#123;</span><br><span class="line">        var myFD = new FormData(form)</span><br><span class="line"></span><br><span class="line">        // 这里可以对form进行操作，使用ajax XMLHttpRequest,axios等发送</span><br><span class="line">        console.dir(myFD)</span><br><span class="line">        console.dir(form)</span><br><span class="line"></span><br><span class="line">        alert(&quot;submitted&quot;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">      form.addEventListener(&quot;submit&quot;, function (event) &#123;</span><br><span class="line">        event.preventDefault();   // 取消按键的原始提交行为</span><br><span class="line">        submitFormData();         //启动监听提交按钮</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><h3 id="26-单页面和多页面的区别"><a href="#26-单页面和多页面的区别" class="headerlink" title="26. 单页面和多页面的区别"></a>26. 单页面和多页面的区别</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2018/06/29/interview/1.png" alt="image" title="">                </div>                <div class="image-caption">image</div>            </figure><h2 id="vue-资料"><a href="#vue-资料" class="headerlink" title="vue 资料"></a>vue 资料</h2><h3 id="1-双向绑定的原理"><a href="#1-双向绑定的原理" class="headerlink" title="1. 双向绑定的原理"></a>1. 双向绑定的原理</h3><ul><li>答：vue.js 是采用数据劫持结合发布者-订阅者模式的方式，通过Object.defineProperty()来劫持各个属性的setter，getter，在数据变动时发布消息给订阅者，触发相应的监听回调。<br>具体步骤：</li><li>第一步：需要observe的数据对象进行递归遍历，包括子属性对象的属性，都加上 setter和getter<br>这样的话，给这个对象的某个值赋值，就会触发setter，那么就能监听到了数据变化</li><li>第二步：compile解析模板指令，将模板中的变量替换成数据，然后初始化渲染页面视图，并将每个指令对应的节点绑定更新函数，添加监听数据的订阅者，一旦数据有变动，收到通知，更新视图</li><li>第三步：Watcher订阅者是Observer和Compile之间通信的桥梁，主要做的事情是:<br>1、在自身实例化时往属性订阅器(dep)里面添加自己<br>2、自身必须有一个update()方法<br>3、待属性变动dep.notice()通知时，能调用自身的update()方法，并触发Compile中绑定的回调，则功成身退。</li><li>第四步：MVVM作为数据绑定的入口，整合Observer、Compile和Watcher三者，通过Observer来监听自己的model数据变化，通过Compile来解析编译模板指令，最终利用Watcher搭起Observer和Compile之间的通信桥梁，达到数据变化 -&gt; 视图更新；视图交互变化(input) -&gt; 数据model变更的双向绑定效果。</li></ul><h3 id="2-生命周期"><a href="#2-生命周期" class="headerlink" title="2. 生命周期"></a>2. 生命周期</h3><ul><li>答：总共分为8个阶段创建前/后，载入前/后，更新前/后，销毁前/后。</li><li>创建前/后： 在beforeCreated阶段，vue实例的挂载元素$el和数据对象data都为undefined，还未初始化。在created阶段，vue实例的数据对象data有了，$el还没有。</li><li>载入前/后：在beforeMount阶段，vue实例的$el和data都初始化了，但还是挂载之前为虚拟的dom节点，data.message还未替换。在mounted阶段，vue实例挂载完成，data.message成功渲染。</li><li>更新前/后：当data变化时，会触发beforeUpdate和updated方法。</li><li>销毁前/后：在执行destroy方法后，对data的改变不会再触发周期函数，说明此时vue实例已经解除了事件监听以及和dom的绑定，但是dom结构依然存在</li></ul><h3 id="3-钩子函数"><a href="#3-钩子函数" class="headerlink" title="3. 钩子函数"></a>3. 钩子函数</h3><ul><li>全局守卫</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">router.beforeEach((to, from, next) =&gt; &#123;</span><br><span class="line">  // ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>全局后置钩子</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">router.afterEach((to, from) =&gt; &#123;</span><br><span class="line">  // ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>组件内守卫</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">const Foo = &#123;</span><br><span class="line">  template: `...`,</span><br><span class="line">  beforeRouteEnter (to, from, next) &#123;</span><br><span class="line">    // 在渲染该组件的对应路由被 confirm 前调用</span><br><span class="line">    // 不！能！获取组件实例 `this`</span><br><span class="line">    // 因为当守卫执行前，组件实例还没被创建</span><br><span class="line">  &#125;,</span><br><span class="line">  beforeRouteUpdate (to, from, next) &#123;</span><br><span class="line">    // 在当前路由改变，但是该组件被复用时调用</span><br><span class="line">    // 举例来说，对于一个带有动态参数的路径 /foo/:id，在 /foo/1 和 /foo/2 之间跳转的时候，</span><br><span class="line">    // 由于会渲染同样的 Foo 组件，因此组件实例会被复用。而这个钩子就会在这个情况下被调用。</span><br><span class="line">    // 可以访问组件实例 `this`</span><br><span class="line">  &#125;,</span><br><span class="line">  beforeRouteLeave (to, from, next) &#123;</span><br><span class="line">    // 导航离开该组件的对应路由时调用</span><br><span class="line">    // 可以访问组件实例 `this`</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-父子组件的加载顺序"><a href="#4-父子组件的加载顺序" class="headerlink" title="4. 父子组件的加载顺序"></a>4. 父子组件的加载顺序</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">                |-- child.vue   （子组件，1）</span><br><span class="line">|-- render.vue --</span><br><span class="line">    （父组件）    |-- sencond.vue （子组件，2）</span><br><span class="line"></span><br><span class="line">父组件-----created</span><br><span class="line">父组件-----beforeMount</span><br><span class="line">第一个子组件-----beforeCreate</span><br><span class="line">第一个子组件-----created</span><br><span class="line">第一个子组件-----beforeMount</span><br><span class="line">第22222个子组件-----beforeCreate</span><br><span class="line">第22222个子组件-----created</span><br><span class="line">第22222个子组件-----beforeMount</span><br><span class="line">第一个子组件-----mounted</span><br><span class="line">第22222个子组件-----mounted</span><br><span class="line">父组件-----mounted</span><br></pre></td></tr></table></figure><h3 id="5-vuex"><a href="#5-vuex" class="headerlink" title="5. vuex"></a>5. vuex</h3><p><a href="https://vuex.vuejs.org/zh/" target="_blank" rel="noopener">文档</a></p><h2 id="es6-资料"><a href="#es6-资料" class="headerlink" title="es6 资料"></a>es6 资料</h2><h3 id="1-使用过哪些方法"><a href="#1-使用过哪些方法" class="headerlink" title="1. 使用过哪些方法"></a>1. 使用过哪些方法</h3><ul><li>尖头函数</li><li>解构赋值 var {a, b} = data</li><li>对象运算扩展符  …a</li><li>Array.From()</li><li>find</li><li>filter</li><li>some</li><li>map</li><li>Object.assign()  Object.keys Object.values</li><li>set   new Set</li><li>Promise</li><li>for in遍历的是数组的索引（即键名），而for of遍历的是数组元素值。</li></ul><h3 id="2-let-const-var-的区别"><a href="#2-let-const-var-的区别" class="headerlink" title="2. let const var 的区别"></a>2. let const var 的区别</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">let 允许你声明一个作用域被限制在块级中的变量、语句或者表达式</span><br><span class="line">let绑定不受变量提升的约束，这意味着let声明不会被提升到当前</span><br><span class="line">该变量处于从块开始到初始化处理的“暂存死区”。</span><br><span class="line">var 声明变量的作用域限制在其声明位置的上下文中，而非声明变量总是全局的</span><br><span class="line">由于变量声明（以及其他声明）总是在任意代码执行之前处理的，所以在代码中的任意位置声明变量总是等效于在代码开头声明</span><br><span class="line">const 声明创建一个值的只读引用 (即指针)</span><br><span class="line">这里就要介绍下 JS 常用类型</span><br><span class="line">String、Number、Boolean、Array、Object、Null、Undefined</span><br><span class="line">其中基本类型 有 Undefined、Null、Boolean、Number、String，保存在栈中；</span><br><span class="line">复合类型 有 Array、Object ，保存在堆中；</span><br><span class="line">基本数据当值发生改变时，那么其对应的指针也将发生改变，故造成 const申明基本数据类型时，</span><br><span class="line">再将其值改变时，将会造成报错， 例如 const a = 3 ; a = 5 时 将会报错；</span><br><span class="line">但是如果是复合类型时，如果只改变复合类型的其中某个Value项时， 将还是正常使用；</span><br></pre></td></tr></table></figure><h2 id="sass"><a href="#sass" class="headerlink" title="sass"></a>sass</h2><h4 id="1-简述scss的特点"><a href="#1-简述scss的特点" class="headerlink" title="1. 简述scss的特点"></a>1. 简述scss的特点</h4><ul><li>变量</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/*声明变量*/</span><br><span class="line">$color: #333;</span><br><span class="line">$bgcolor:#f36;</span><br><span class="line"></span><br><span class="line">body &#123;</span><br><span class="line">    color: $color;</span><br><span class="line">    background-color: #f36;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>嵌套</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">section &#123;</span><br><span class="line">    margin: 10px;</span><br><span class="line">    nav &#123;</span><br><span class="line">    height: 25px;</span><br><span class="line">        a &#123;</span><br><span class="line">            color: #0982c1;</span><br><span class="line">            &amp;:hover&#123;</span><br><span class="line">                text-decoration: underline;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Mixins</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@mixin error($borderWidth:2px)&#123;</span><br><span class="line">    border: $borderWidth solid #f00;</span><br><span class="line">    color: #f00;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.generic-error &#123;</span><br><span class="line">     @include error();/*直接调用error Mixins*/</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>继承</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">.block &#123;</span><br><span class="line">    margin: 10px 5px;</span><br><span class="line">    padding:2px;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">p &#123;</span><br><span class="line">    @extend .block;/*继承.block选择器下所有样式*/</span><br><span class="line">    border: 1px solid #eee;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="css"><a href="#css" class="headerlink" title="css"></a>css</h2><h3 id="1-清除浮动"><a href="#1-清除浮动" class="headerlink" title="1. 清除浮动"></a>1. 清除浮动</h3><p><a href="https://blog.csdn.net/promisecao/article/details/52771856" target="_blank" rel="noopener">资料链接</a></p><h3 id="2-垂直居中"><a href="#2-垂直居中" class="headerlink" title="2. 垂直居中"></a>2. 垂直居中</h3><p><a href="https://www.cnblogs.com/hutuzhu/p/4450850.html" target="_blank" rel="noopener">资料链接</a></p><h3 id="3-三角形"><a href="#3-三角形" class="headerlink" title="3. 三角形"></a>3. 三角形</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.jiao&#123;</span><br><span class="line">  position: relative;</span><br><span class="line">  height: 0px;</span><br><span class="line">  width: 0px;</span><br><span class="line">  border-top: 90px solid transparent;</span><br><span class="line">  border-right: 100px solid black;</span><br><span class="line">  border-bottom: 100px solid transparent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-1px的的问题"><a href="#4-1px的的问题" class="headerlink" title="4. 1px的的问题"></a>4. 1px的的问题</h3> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1 局部处理</span><br><span class="line">    mate标签中的 viewport属性 ，initial-scale 设置为 1</span><br><span class="line">    rem 按照设计稿标准走，外加利用transfrome 的scale(0.5) 缩小一倍即可；</span><br><span class="line">2 全局处理</span><br><span class="line">    mate标签中的 viewport属性 ，initial-scale 设置为 0.5</span><br><span class="line">    rem 按照设计稿标准走即可</span><br></pre></td></tr></table></figure><h3 id="5-meta的问题"><a href="#5-meta的问题" class="headerlink" title="5. meta的问题"></a>5. meta的问题</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 设置缩放 --&gt;</span><br><span class="line">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1, user-scalable=no, minimal-ui&quot; /&gt;</span><br><span class="line">&lt;!-- 可隐藏地址栏，仅针对IOS的Safari（注：IOS7.0版本以后，safari上已看不到效果） --&gt;</span><br><span class="line">&lt;meta name=&quot;apple-mobile-web-app-capable&quot; content=&quot;yes&quot; /&gt;</span><br><span class="line">&lt;!-- 仅针对IOS的Safari顶端状态条的样式（可选default/black/black-translucent ） --&gt;</span><br><span class="line">&lt;meta name=&quot;apple-mobile-web-app-status-bar-style&quot; content=&quot;black&quot; /&gt;</span><br><span class="line">&lt;!-- IOS中禁用将数字识别为电话号码/忽略Android平台中对邮箱地址的识别 --&gt;</span><br><span class="line">&lt;meta name=&quot;format-detection&quot;content=&quot;telephone=no, email=no&quot; /&gt;</span><br><span class="line">其他meta标签</span><br><span class="line">&lt;!-- 启用360浏览器的极速模式(webkit) --&gt;</span><br><span class="line">&lt;meta name=&quot;renderer&quot; content=&quot;webkit&quot;&gt;</span><br><span class="line">&lt;!-- 避免IE使用兼容模式 --&gt;</span><br><span class="line">&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">&lt;!-- 针对手持设备优化，主要是针对一些老的不识别viewport的浏览器，比如黑莓 --&gt;</span><br><span class="line">&lt;meta name=&quot;HandheldFriendly&quot; content=&quot;true&quot;&gt;</span><br><span class="line">&lt;!-- 微软的老式浏览器 --&gt;</span><br><span class="line">&lt;meta name=&quot;MobileOptimized&quot; content=&quot;320&quot;&gt;</span><br><span class="line">&lt;!-- uc强制竖屏 --&gt;</span><br><span class="line">&lt;meta name=&quot;screen-orientation&quot; content=&quot;portrait&quot;&gt;</span><br><span class="line">&lt;!-- QQ强制竖屏 --&gt;</span><br><span class="line">&lt;meta name=&quot;x5-orientation&quot; content=&quot;portrait&quot;&gt;</span><br><span class="line">&lt;!-- UC强制全屏 --&gt;</span><br><span class="line">&lt;meta name=&quot;full-screen&quot; content=&quot;yes&quot;&gt;</span><br><span class="line">&lt;!-- QQ强制全屏 --&gt;</span><br><span class="line">&lt;meta name=&quot;x5-fullscreen&quot; content=&quot;true&quot;&gt;</span><br><span class="line">&lt;!-- UC应用模式 --&gt;</span><br><span class="line">&lt;meta name=&quot;browsermode&quot; content=&quot;application&quot;&gt;</span><br><span class="line">&lt;!-- QQ应用模式 --&gt;</span><br><span class="line">&lt;meta name=&quot;x5-page-mode&quot; content=&quot;app&quot;&gt;</span><br><span class="line">&lt;!-- windows phone 点击无高光 --&gt;</span><br><span class="line">&lt;meta name=&quot;msapplication-tap-highlight&quot; content=&quot;no&quot;&gt;</span><br></pre></td></tr></table></figure><h3 id="6-省略号-多行省略号"><a href="#6-省略号-多行省略号" class="headerlink" title="6. 省略号 多行省略号"></a>6. 省略号 多行省略号</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- 单行文本</span><br><span class="line">overflow: hidden;</span><br><span class="line">text-overflow:ellipsis;</span><br><span class="line">white-space: nowrap;</span><br><span class="line">当然还需要加宽度width属来兼容部分浏览。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- 多行文本</span><br><span class="line">display: -webkit-box;</span><br><span class="line">-webkit-box-orient: vertical;</span><br><span class="line">-webkit-line-clamp: 3;</span><br><span class="line">overflow: hidden;</span><br></pre></td></tr></table></figure><p> 适用范围：</p><p>因使用了WebKit的CSS扩展属性，该方法适用于WebKit浏览器及移动端；</p><blockquote><p>注：</p></blockquote><ul><li>-webkit-line-clamp用来限制在一个块元素显示的文本的行数。 为了实现该效果，它需要组合其他的WebKit属性。常见结合属性：</li><li>display: -webkit-box; 必须结合的属性 ，将对象作为弹性伸缩盒子模型显示 。</li><li>-webkit-box-orient 必须结合的属性 ，设置或检索伸缩盒对象的子元素的排列方式 。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">div &#123;</span><br><span class="line">    position: relative;</span><br><span class="line">    line-height: 20px;</span><br><span class="line">    max-height: 40px;</span><br><span class="line">    overflow: hidden;</span><br><span class="line">&#125;</span><br><span class="line">div:after &#123;</span><br><span class="line">    content: &quot;...&quot;; position: absolute; bottom: 0; right: 0; padding-left: 40px;</span><br><span class="line">    background: -webkit-linear-gradient(left, transparent, #fff 55%);</span><br><span class="line">    background: -o-linear-gradient(right, transparent, #fff 55%);</span><br><span class="line">    background: -moz-linear-gradient(right, transparent, #fff 55%);</span><br><span class="line">    background: linear-gradient(to right, transparent, #fff 55%);</span><br><span class="line">&#125;</span><br><span class="line">不要只顾着吃，要注意胃口，此方法有个弊端 那就是 【未超出行的情况下也会出现省略号】 ，这样会不会很挫！！！ 没办法，只能结合JS 进行优化该方法了。</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>注</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1、将height设置为line-height的整数倍，防止超出的文字露出。</span><br><span class="line">2、给p::after添加渐变背景可避免文字只显示一半。</span><br><span class="line">3、由于ie6-7不显示content内容，所以要添加标签兼容ie6-7（如：&lt;span&gt;…&lt;span/&gt;）；兼容ie8需要将::after替换成:after。</span><br></pre></td></tr></table></figure><h3 id="7-消除transition闪屏"><a href="#7-消除transition闪屏" class="headerlink" title="7.消除transition闪屏"></a>7.消除transition闪屏</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">.css &#123;</span><br><span class="line">    -webkit-transform-style: preserve-3d;</span><br><span class="line">    -webkit-backface-visibility: hidden;</span><br><span class="line">    -webkit-perspective: 1000;</span><br><span class="line">&#125;</span><br><span class="line">过渡动画（在没有启动硬件加速的情况下）会出现抖动的现象， 以上的 解决方案只是改变 视角 来启动硬件加速的一种方式；</span><br><span class="line">启动硬件加速的 另外一种方式：</span><br><span class="line">.css &#123;</span><br><span class="line">    -webkit-transform: translate3d(0,0,0);</span><br><span class="line">    -moz-transform: translate3d(0,0,0);</span><br><span class="line">    -ms-transform: translate3d(0,0,0);</span><br><span class="line">    transform: translate3d(0,0,0);</span><br><span class="line">&#125;</span><br><span class="line">启动硬件加速</span><br><span class="line">最常用的方式：translate3d、translateZ、transform</span><br><span class="line">opacity属性/过渡动画（需要动画执行的过程中才会创建合成层，动画没有开始或结束后元素还会回到之前的状态）</span><br><span class="line">will-chang属性（这个比较偏僻），一般配合opacity与translate使用（而且经测试，除了上述可以引发硬件加速的属性外，</span><br><span class="line">其它属性并不会变成复合层），</span><br><span class="line">弊端： 硬件加速会导致 CPU性能占用量过大，电池电量消耗加大 ；因此 尽量避免泛滥使用硬件加速。</span><br></pre></td></tr></table></figure><h3 id="8-改变placeholder的字体颜色大小"><a href="#8-改变placeholder的字体颜色大小" class="headerlink" title="8. 改变placeholder的字体颜色大小"></a>8. 改变placeholder的字体颜色大小</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">input::-webkit-input-placeholder &#123;</span><br><span class="line">    /* WebKit browsers */</span><br><span class="line">    font-size:14px;</span><br><span class="line">    color: #333;</span><br><span class="line">&#125;</span><br><span class="line">input::-moz-placeholder &#123;</span><br><span class="line">    /* Mozilla Firefox 19+ */</span><br><span class="line">    font-size:14px;</span><br><span class="line">    color: #333;</span><br><span class="line">&#125;</span><br><span class="line">input:-ms-input-placeholder &#123;</span><br><span class="line">    /* Internet Explorer 10+ */</span><br><span class="line">    font-size:14px;</span><br><span class="line">    color: #333;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><h3 id="1-使用字体图标-当字体没有加载出来的时候-显示的是-X"><a href="#1-使用字体图标-当字体没有加载出来的时候-显示的是-X" class="headerlink" title="1. 使用字体图标, 当字体没有加载出来的时候, 显示的是 X;"></a>1. 使用字体图标, 当字体没有加载出来的时候, 显示的是 X;</h3><ul><li><a href="https://segmentfault.com/q/1010000000396844" target="_blank" rel="noopener">https://segmentfault.com/q/1010000000396844</a></li><li><a href="https://www.aliyun.com/jiaocheng/671766.html" target="_blank" rel="noopener">https://www.aliyun.com/jiaocheng/671766.html</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;javascript&quot;&gt;&lt;a href=&quot;#javascript&quot; class=&quot;headerlink&quot; title=&quot;javascript&quot;&gt;&lt;/a&gt;javascript&lt;/h2&gt;&lt;h3 id=&quot;1-数据类型（如何准确判断出来类型）&quot;&gt;&lt;a href=&quot;#1-数
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>react onClick 事件</title>
    <link href="http://alex.zhooson.cn/2018/06/12/react-this/"/>
    <id>http://alex.zhooson.cn/2018/06/12/react-this/</id>
    <published>2018-06-12T15:22:28.000Z</published>
    <updated>2018-06-12T15:47:19.000Z</updated>
    
    <content type="html"><![CDATA[<ol><li>jsx 里面,onClick={this.函数名}来绑定事件</li><li>this引用的问题，需要在构造函数里面用bind绑定this</li><li>this.setState修改state,是返回新的state，而不是修改</li></ol><h3 id="this的用法如下"><a href="#this的用法如下" class="headerlink" title="this的用法如下"></a>this的用法如下</h3><ul><li>方法一</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">class First extends React.Component &#123;</span><br><span class="line">    constructor(props)&#123;</span><br><span class="line">        super(props)</span><br><span class="line">        this.state=&#123;</span><br><span class="line">            arr: [ &apos;AAA&apos;, &apos;BBBB&apos;, &apos;CCCC&apos; ]</span><br><span class="line">        &#125;</span><br><span class="line">        this.add = this.add.bind(this); // 绑定this的方法</span><br><span class="line">    &#125;</span><br><span class="line">    add()&#123;</span><br><span class="line">        console.info(&apos;测试onclick的事件&apos;);</span><br><span class="line">        this.setState(&#123;</span><br><span class="line">            arr:[...this.state.arr,&apos;DDDD &apos;+Math.random()]</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render()&#123;</span><br><span class="line">        return(</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;button onClick=&#123;this.add&#125;&gt;点击添加数据&lt;/button&gt;</span><br><span class="line">                &lt;ul&gt;</span><br><span class="line">                    &#123; this.state.arr.map(v=&gt;&#123;</span><br><span class="line">                        return &lt;li key=&#123;v&#125;&gt;&#123;v&#125;&lt;/li&gt;</span><br><span class="line">                    &#125;)&#125;</span><br><span class="line">                &lt;/ul&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>强制在constructor里面的通过bind来绑定this，但是函数一旦多起来，就比较繁琐</p></blockquote><ul><li>方法二</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">class First extends React.Component &#123;</span><br><span class="line">    constructor(props)&#123;</span><br><span class="line">        super(props)</span><br><span class="line">        this.state=&#123;</span><br><span class="line">            arr: [ &apos;AAA&apos;, &apos;BBBB&apos;, &apos;CCCC&apos; ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    add()&#123;</span><br><span class="line">        console.info(&apos;测试onclick的事件&apos;);</span><br><span class="line">        this.setState(&#123;</span><br><span class="line">            arr:[...this.state.arr,&apos;DDDD &apos;+Math.random()]</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render()&#123;</span><br><span class="line">        return(</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;button onClick=&#123;()=&gt;this.add()&#125;&gt;点击添加数据&lt;/button&gt;</span><br><span class="line">                &lt;ul&gt;</span><br><span class="line">                    &#123; this.state.arr.map(v=&gt;&#123;</span><br><span class="line">                        return &lt;li key=&#123;v&#125;&gt;&#123;v&#125;&lt;/li&gt;</span><br><span class="line">                    &#125;)&#125;</span><br><span class="line">                &lt;/ul&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>当前触发函数位置使用尖头函数，非常方便 ，另外一种等价的方法也是尖头函数的方法如下</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">add = () =&gt; &#123;</span><br><span class="line">    console.info(&apos;测试onclick的事件&apos;);</span><br><span class="line">    this.setState(&#123;</span><br><span class="line">        arr:[...this.state.arr,&apos;DDDD &apos;+Math.random()]</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;jsx 里面,onClick={this.函数名}来绑定事件&lt;/li&gt;
&lt;li&gt;this引用的问题，需要在构造函数里面用bind绑定this&lt;/li&gt;
&lt;li&gt;this.setState修改state,是返回新的state，而不是修改&lt;/li&gt;
&lt;/ol&gt;
&lt;h
      
    
    </summary>
    
    
      <category term="react" scheme="http://alex.zhooson.cn/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>H5(vue)页面中尝试调起APP</title>
    <link href="http://alex.zhooson.cn/2018/05/31/vue-app/"/>
    <id>http://alex.zhooson.cn/2018/05/31/vue-app/</id>
    <published>2018-05-31T10:26:33.000Z</published>
    <updated>2018-07-31T02:06:55.000Z</updated>
    
    <content type="html"><![CDATA[<p>现在好多的app应用都有对应的h5页面，那么h5和app直接是如何交互的呢？<br>如图：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2018/05/31/vue-app/1.jpeg" alt="这里写图片描述" title="">                </div>                <div class="image-caption">这里写图片描述</div>            </figure></p><p>这一个按钮就是通向app的传送通道，那么这个功能是如何实现的呢？<br>本文以vue的示例来讲解</p><p>先看效果图：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2018/05/31/vue-app/2.jpeg" alt="这里写图片描述" title="">                </div>                <div class="image-caption">这里写图片描述</div>            </figure></p><p>现在首先创建一个vue页面，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;H5ToApp&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;btn&quot;&gt;在app内部打开&lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &apos;app&apos;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;&#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;&#125;,</span><br><span class="line">  mounted() &#123;&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class="line">.H5ToApp &#123;</span><br><span class="line">  height: 100vh;</span><br><span class="line">  width: 100%;</span><br><span class="line">  .btn &#123;</span><br><span class="line">    background-image: -webkit-linear-gradient(</span><br><span class="line">      180deg,</span><br><span class="line">      rgb(251, 17, 72) 0%,</span><br><span class="line">      rgb(253, 133, 80) 100%</span><br><span class="line">    );</span><br><span class="line">    width: 100%;</span><br><span class="line">    height: 1rem;</span><br><span class="line">    position: fixed;</span><br><span class="line">    bottom: 0;</span><br><span class="line">    left: 0;</span><br><span class="line">    right: 0;</span><br><span class="line">    color: #fff;</span><br><span class="line">    font-size: 0.3rem;</span><br><span class="line">    display: flex;</span><br><span class="line">    align-items: center;</span><br><span class="line">    justify-content: center;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>本项目的目录结构：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://img.blog.csdn.net/20171229111911221?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvWmhvb3Nvbg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述" title="">                </div>                <div class="image-caption">这里写图片描述</div>            </figure></p><ul><li><p>linkedme.min.js 的下载地址（<a href="https://static.lkme.cc/linkedme.min.js）" target="_blank" rel="noopener">https://static.lkme.cc/linkedme.min.js）</a></p></li><li><p>开始编写linkedme,js的文件</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">let linkedmePromise =</span><br><span class="line">    import (&apos;src/assets/vendor/linkedme.min.js&apos;)</span><br><span class="line">let linkedmeType = &quot;live&quot;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">let defaultData = &#123;&#125;;</span><br><span class="line">defaultData.type = linkedmeType; //表示现在使用线上模式,如果填写&quot;test&quot;, 表示测试模式.【可选】</span><br><span class="line">defaultData.feature = &quot;功能名称&quot;; // 自定义深度链接功能，多个用逗号分隔，【可选】</span><br><span class="line">defaultData.stage = &quot;阶段名称&quot;; // 自定义深度链接阶段，多个用逗号分隔，【可选】</span><br><span class="line">defaultData.channel = &quot;渠道名称&quot;; // 自定义深度链接渠道，多个用逗号分隔，【可选】</span><br><span class="line">defaultData.tags = &quot;标签名称&quot;; // 自定义深度链接标签，多个用逗号分隔，【可选】</span><br><span class="line">defaultData.ios_custom_url = &quot;&quot;; // 自定义iOS平台下App的下载地址，如果是AppStore的下载地址可以不用填写，【可选】</span><br><span class="line">defaultData.android_custom_url = &quot;http://a.app.qq.com/o/simple.jsp?pkgname=com.xxxxx.weddingvideo&quot;; // 自定义安卓平台下App的下载地址，【可选】</span><br><span class="line">// 下面是自定义深度链接参数，用户点击深度链接打开app之后，params参数将被带入app</span><br><span class="line">// 比如详情页面的参数，可以写进去，这样唤起app后可直接跳转到详情页【可选】</span><br><span class="line"></span><br><span class="line">export default async function(para) &#123;</span><br><span class="line">    await linkedmePromise</span><br><span class="line">    if (linkedme.LinkedME_KEY !== &quot;b5942bd492c086472413db07481c6a7ff&quot;) &#123;</span><br><span class="line">        linkedme.init(&quot;b5942bd492c086472413db07481c6a7ff&quot;, &#123; type: linkedmeType &#125;, null);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    para = para || &#123;&#125;</span><br><span class="line">    let str = &apos;&apos;;</span><br><span class="line">    for (let k in para) &#123;</span><br><span class="line">        str += `&quot;$&#123;k&#125;&quot;:&quot;$&#123;para[k]&#125;&quot;,`</span><br><span class="line">    &#125;</span><br><span class="line">    str = str.slice(0, -1)</span><br><span class="line">    let params = `&#123;$&#123;str&#125;&#125;`</span><br><span class="line"></span><br><span class="line">    // console.log(&apos;params&apos;,params)</span><br><span class="line"></span><br><span class="line">    return new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">        // console.log(&#123;</span><br><span class="line">        //   ...defaultData,</span><br><span class="line">        //   ...&#123;params: params&#125;,</span><br><span class="line">        // &#125;)</span><br><span class="line">        linkedme.link(&#123;</span><br><span class="line">            ...defaultData,</span><br><span class="line">            ... &#123; params: params &#125;,</span><br><span class="line">        &#125;, function(err, data) &#123;</span><br><span class="line">            if (err) &#123;</span><br><span class="line">                // 生成深度链接失败，返回错误对象err</span><br><span class="line">                console.log(err)</span><br><span class="line">                alert(err.message)</span><br><span class="line">                reject(err)</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                // console.log(data.url)</span><br><span class="line">                /*</span><br><span class="line">                 生成深度链接成功，深度链接可以通过data.url得到，</span><br><span class="line">                 将深度链接绑定到&lt;a&gt;标签，这样当用户点击这</span><br><span class="line">                 个深度链接，如果是在pc上，那么跳转到深度链接二维</span><br><span class="line">                 码页面，用户用手机扫描该二维码就会打开app；如果</span><br><span class="line">                 在移动端，深度链接直接会根据手机设备类型打开ios</span><br><span class="line">                 或者安卓app</span><br><span class="line">                 */</span><br><span class="line">                // console.log(&apos;data&apos;,data)</span><br><span class="line">                resolve(data)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, false);</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对应的组件中需要修改以下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;H5ToApp&quot;&gt;</span><br><span class="line">  &lt;!--需要使用a标签--&gt;</span><br><span class="line">    &lt;a class=&quot;btn&quot; :href=&quot;href&quot;&gt;在app内部打开&lt;/a&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">//脚手架配置了alias</span><br><span class="line">import linkedmeLink from &apos;src/assets/script/linkedme.js&apos;;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &apos;app&apos;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      href: &apos;&apos;,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;&#125;,</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    //detailid,view 这个名字找app要的</span><br><span class="line">    linkedmeLink(&#123;</span><br><span class="line">      // detailid: this.$route.params.id,</span><br><span class="line">      detailid: 4, //当前id</span><br><span class="line">      view: &apos;waredetail&apos;, //跳转app的名字</span><br><span class="line">    &#125;).then(res =&gt; &#123;</span><br><span class="line">      this.href = res.url;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>linkedme的文档</strong>（<a href="https://pagedoc.lkme.cc/js-sdk-download.html）" target="_blank" rel="noopener">https://pagedoc.lkme.cc/js-sdk-download.html）</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;现在好多的app应用都有对应的h5页面，那么h5和app直接是如何交互的呢？&lt;br&gt;如图：&lt;br&gt;&lt;figure class=&quot;image-bubble&quot;&gt;
                &lt;div class=&quot;img-lightbox&quot;&gt;
               
      
    
    </summary>
    
    
      <category term="vue" scheme="http://alex.zhooson.cn/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>vue + qiniu(七牛) + axios 实现图片上传</title>
    <link href="http://alex.zhooson.cn/2018/05/31/qiniu/"/>
    <id>http://alex.zhooson.cn/2018/05/31/qiniu/</id>
    <published>2018-05-31T10:24:44.000Z</published>
    <updated>2018-07-31T02:06:47.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li>上传头像功能，可以使用原生的ajax，现在有了axios封装好的ajax，通过formData的方式。</li><li>上传七牛的图片，前提是要先从后台获取的一个token的，上传图片时候作为参数传给七牛。</li><li>自己对应设置反向代理</li></ul><p><a href="https://developer.qiniu.com/kodo/manual/1272/form-upload" target="_blank" rel="noopener">七牛的官方文档</a></p><p>效果如下：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2018/05/31/qiniu/1.gif" alt="这里写图片描述" title="">                </div>                <div class="image-caption">这里写图片描述</div>            </figure></p><p>以下只粘贴出关键代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;header class=&quot;header&quot;&gt;</span><br><span class="line">&lt;label class=&quot;avatar-bg&quot;&gt;</span><br><span class="line">&lt;!--默认显示的一张图片--&gt;</span><br><span class="line">&lt;div class=&quot;avatar&quot; v-if=&quot;!previewAvatar&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;!--七牛回调的图片path--&gt;</span><br><span class="line">&lt;img :src=&quot;previewAvatar&quot; class=&quot;real-photo&quot; v-if=&quot;previewAvatar&quot;&gt;</span><br><span class="line">&lt;input ref=&quot;upload&quot; id=&quot;upload&quot; type=&quot;file&quot; class=&quot;realfilebt&quot; style=&quot;display: none;&quot;/&gt;</span><br><span class="line">&lt;/label&gt;</span><br><span class="line">&lt;!--mint-ui的progress的库--&gt;</span><br><span class="line">&lt;mt-progress v-if=&quot;!(progress==0||progress==100)&quot; :value=&quot;progress&quot; :bar-height=&quot;5&quot;</span><br><span class="line">  class=&quot;progress&quot;&gt;&lt;/mt-progress&gt;</span><br><span class="line">&lt;/header&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">//引入axios</span><br><span class="line">import axios from &apos;axios&apos;;</span><br><span class="line">import Progress from &apos;mint-ui/lib/progress&apos;;</span><br><span class="line">import &apos;mint-ui/lib/Progress/style.css&apos;;</span><br><span class="line">//创建axios的实例</span><br><span class="line">const axiosInstance = axios.create(&#123;&#125;);</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">name: &apos;test&apos;,</span><br><span class="line">data() &#123;</span><br><span class="line">return &#123;</span><br><span class="line">files: [], // 文件</span><br><span class="line">uploadToken: &apos;&apos;, // 上传文件 token</span><br><span class="line">previewAvatar: &apos;&apos;, // 页面展示的avatar</span><br><span class="line">progress: 0, // 进度条</span><br><span class="line">&#125;;</span><br><span class="line">&#125;,</span><br><span class="line">//node版本要是8+，以上才能使用async await的方法</span><br><span class="line">async mounted() &#123;</span><br><span class="line">let self = this;</span><br><span class="line">//页面加载 拉去token</span><br><span class="line">let tokenRes = await axios(&#123;</span><br><span class="line">url: &apos;/api/sz/upToken&apos;,</span><br><span class="line">&#125;);</span><br><span class="line">this.uploadToken = tokenRes.data.token;</span><br><span class="line">this.$refs.upload.addEventListener(&apos;change&apos;, function() &#123;</span><br><span class="line">//console.log(this.files)</span><br><span class="line">var data = new FormData();</span><br><span class="line">data.append(&apos;token&apos;, self.uploadToken);</span><br><span class="line">data.append(&apos;file&apos;, this.files[0]);</span><br><span class="line">axiosInstance(&#123;</span><br><span class="line">method: &apos;POST&apos;,</span><br><span class="line">url: &apos;http://up.qiniu.com&apos;,</span><br><span class="line">data: data,</span><br><span class="line">onUploadProgress: function(progressEvent) &#123;</span><br><span class="line">var percentCompleted = Math.round(progressEvent.loaded * 100 / progressEvent.total);</span><br><span class="line">//console.log(percentCompleted)</span><br><span class="line">//对应上传进度条</span><br><span class="line">self.progress = percentCompleted;</span><br><span class="line">&#125;,</span><br><span class="line">&#125;)</span><br><span class="line">.then(function(res) &#123;</span><br><span class="line">//console.log(&apos;res&apos;,res)</span><br><span class="line">let &#123; base_url, path &#125; = res.data;</span><br><span class="line">//页面所用字段</span><br><span class="line">self.previewAvatar = `$&#123;base_url&#125;$&#123;path&#125;?imageView2/1/w/154/h/154`;</span><br><span class="line">//传给后台不完整</span><br><span class="line">self.formData.avatar = `$&#123;path&#125;`;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line">.catch(function(err) &#123;</span><br><span class="line">console.log(&apos;err&apos;, err);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;,</span><br><span class="line">components: &#123;</span><br><span class="line">[Progress.name]: Progress,   //mint-ui引入组件的方法</span><br><span class="line">&#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;上传头像功能，可以使用原生的ajax，现在有了axios封装好的ajax，通过formData的方式。&lt;/li&gt;
&lt;li&gt;上传七牛的图片，前提是要先从后台获取的一个token的，上传图片时候作为参数传给七牛。&lt;/li&gt;
&lt;li&gt;自己对应设置反向代理&lt;/li&gt;
&lt;
      
    
    </summary>
    
    
      <category term="vue qiniu" scheme="http://alex.zhooson.cn/tags/vue-qiniu/"/>
    
  </entry>
  
  <entry>
    <title>vue实现stickUp的效果</title>
    <link href="http://alex.zhooson.cn/2018/05/31/stickup/"/>
    <id>http://alex.zhooson.cn/2018/05/31/stickup/</id>
    <published>2018-05-31T10:24:03.000Z</published>
    <updated>2018-07-31T02:06:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>先学习这篇文章<br><a href="http://blog.csdn.net/zhooson/article/details/78587539" target="_blank" rel="noopener">顶部吸顶的效果查看</a></p><p>效果1：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2018/05/31/stickup/1.gif" alt="这里写图片描述" title="">                </div>                <div class="image-caption">这里写图片描述</div>            </figure></p><p>效果2：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2018/05/31/stickup/2.gif" alt="这里写图片描述" title="">                </div>                <div class="image-caption">这里写图片描述</div>            </figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">&lt;header class=&quot;header&quot; ref=&apos;header&apos;&gt;高度250&lt;/header&gt;</span><br><span class="line">&lt;ul class=&quot;nav&quot; :class=&quot;&#123;isFixed:isFixed&#125;&quot; ref=&quot;nav&quot;&gt;</span><br><span class="line">&lt;li class=&quot;item&quot; v-for=&quot;(item,index) in new Array(4)&quot; :key=&quot;index&quot; @click=&quot;selectItem(index)&quot;</span><br><span class="line">  :class=&quot;&#123;&apos;current&apos;:currentIndex===index&#125;&quot;&gt;&#123;&#123;index+1&#125;&#125;，高度50&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;div class=&quot;fakeNavHeight&quot; v-if=&quot;isFixed&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;ul class=&quot;content&quot;&gt;</span><br><span class="line">&lt;li class=&quot;tips&quot; ref=&quot;foodList&quot; v-for=&quot;(item,index) in new Array(4)&quot; :key=&quot;index&quot;&gt;&#123;&#123;index+1&#125;&#125;&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">var throttle = require(&apos;lodash/throttle&apos;); //从lodash中引入的throttle节流函数</span><br><span class="line">export default &#123;</span><br><span class="line">name: &apos;stickUp&apos;,</span><br><span class="line">data() &#123;</span><br><span class="line">return &#123;</span><br><span class="line">listHeight: [],</span><br><span class="line">// currentIndex: 0,</span><br><span class="line">isFixed: false, //是否固定的</span><br><span class="line">throttleScroll: null, //定义一个截流函数的变量,</span><br><span class="line">scrollTop: 0, //页面实时滚动的距离</span><br><span class="line">headerHeight: &apos;&apos;, //header部分的高度，</span><br><span class="line">navHeight: &apos;&apos;, //nav部分的高度，</span><br><span class="line">&#125;;</span><br><span class="line">&#125;,</span><br><span class="line">computed: &#123;</span><br><span class="line">currentIndex() &#123;</span><br><span class="line">console.info(&apos;scrollTop&apos;, this.scrollTop, &apos;headerHeight&apos;, this.headerHeight, &apos;navHeight&apos;, this.navHeight);</span><br><span class="line">for (let i = 0; i &lt; this.listHeight.length; i++) &#123;</span><br><span class="line">let height1 = this.listHeight[i];</span><br><span class="line">let height2 = this.listHeight[i + 1];</span><br><span class="line">if (this.scrollTop - this.headerHeight &gt;= height1 &amp;&amp; this.scrollTop - this.headerHeight &lt; height2) &#123;</span><br><span class="line">return i;</span><br><span class="line">&#125; else if ($(window).height() + this.scrollTop + 20 &gt;= $(document).height()) &#123;</span><br><span class="line">//到达底部还有20px 触发currentIndex选中 , 只针对最后一个元素不满整屏的高度的时候</span><br><span class="line">return this.listHeight.length - 2;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return 0;</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">selectItem(index) &#123;</span><br><span class="line">console.info(&apos;index&apos;, index);</span><br><span class="line">//恒定时间</span><br><span class="line">var speed = 200; //滑动的速度</span><br><span class="line">$(&apos;body,html&apos;).animate(&#123; scrollTop: this.listHeight[index] + this.headerHeight &#125;, speed);</span><br><span class="line">return false;</span><br><span class="line">&#125;,</span><br><span class="line">//滚动的函数</span><br><span class="line">handleScroll() &#123;</span><br><span class="line">this.headerHeight = $(this.$refs.header).outerHeight(); //header的高度</span><br><span class="line">this.scrollTop = $(window).scrollTop(); //滚动的距离的，为什么这里使用的jq，因为不用考虑的什么的兼容问题</span><br><span class="line">this.navHeight = $(this.$refs.nav).outerHeight(); //nav的高度</span><br><span class="line">//判断是否吸顶效果</span><br><span class="line">if (this.scrollTop &gt; this.headerHeight) &#123;</span><br><span class="line">this.isFixed = true;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">this.isFixed = false;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">_calculateHeight() &#123;</span><br><span class="line">let foodList = this.$refs.foodList;</span><br><span class="line">let height = 0;</span><br><span class="line">this.listHeight.push(height);</span><br><span class="line">for (let i = 0; i &lt; foodList.length; i++) &#123;</span><br><span class="line">let item = foodList[i];</span><br><span class="line">height += item.clientHeight;</span><br><span class="line">this.listHeight.push(height);</span><br><span class="line">&#125;</span><br><span class="line">console.info(&apos;每个东西的高度&apos;, this.listHeight, &apos;页面总的高度&apos;, $(window).height(), $(document).height());</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">mounted() &#123;</span><br><span class="line">this.$nextTick(() =&gt; &#123;</span><br><span class="line">//这里使用监听的scroll的事件，为什么要使用的节流函数，如果不使用的，页面一直在滚动计算的，这样在</span><br><span class="line">//使用手机时候，出现非常卡的，隔一段时间计算，大大降低了性能的消耗（具体的好处自己去查资料）</span><br><span class="line">window.addEventListener(&apos;scroll&apos;, this.throttleScroll, false);</span><br><span class="line">this._calculateHeight();</span><br><span class="line">&#125;);</span><br><span class="line">this.throttleScroll = throttle(this.handleScroll, 100);</span><br><span class="line">&#125;,</span><br><span class="line">destroyed() &#123;</span><br><span class="line">//离开页面需要remove这个监听器，不然还是卡到爆。</span><br><span class="line">window.removeEventListener(&apos;scroll&apos;, this.throttleScroll);</span><br><span class="line">&#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class="line">.header &#123;</span><br><span class="line">height: 5rem;</span><br><span class="line">width: 100%;</span><br><span class="line">background-color: red;</span><br><span class="line">&#125;</span><br><span class="line">.nav &#123;</span><br><span class="line">display: flex;</span><br><span class="line">height: 1rem;</span><br><span class="line">background-color: transparent;</span><br><span class="line">line-height: 1rem;</span><br><span class="line">text-align: center;</span><br><span class="line">width: 100%;</span><br><span class="line">&amp;.isFixed &#123;</span><br><span class="line">position: fixed;</span><br><span class="line">left: 0;</span><br><span class="line">top: 0;</span><br><span class="line">z-index: 9999;</span><br><span class="line">&#125;</span><br><span class="line">.item &#123;</span><br><span class="line">flex: 1;</span><br><span class="line">&amp;.current &#123;</span><br><span class="line">background-color: #000;</span><br><span class="line">color: #fff;</span><br><span class="line">font-weight: 900;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">.fakeNavHeight &#123;</span><br><span class="line">height: 1rem;</span><br><span class="line">width: 100%;</span><br><span class="line">&#125;</span><br><span class="line">.content &#123;</span><br><span class="line">.tips &#123;</span><br><span class="line">height: 15rem;</span><br><span class="line">width: 100%;</span><br><span class="line">&amp;:first-child &#123;</span><br><span class="line">background-color: red;</span><br><span class="line">&#125;</span><br><span class="line">&amp;:nth-child(2) &#123;</span><br><span class="line">background-color: pink;</span><br><span class="line">&#125;</span><br><span class="line">&amp;:nth-child(3) &#123;</span><br><span class="line">background-color: yellow;</span><br><span class="line">&#125;</span><br><span class="line">&amp;:last-child &#123;</span><br><span class="line">background-color: blue;</span><br><span class="line">height: 6rem;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;先学习这篇文章&lt;br&gt;&lt;a href=&quot;http://blog.csdn.net/zhooson/article/details/78587539&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;顶部吸顶的效果查看&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;效果1：&lt;br&gt;&lt;f
      
    
    </summary>
    
    
      <category term="vue" scheme="http://alex.zhooson.cn/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>vue+jquery+lodash 实现的滑动时顶部悬浮固定</title>
    <link href="http://alex.zhooson.cn/2018/05/31/fixedtop/"/>
    <id>http://alex.zhooson.cn/2018/05/31/fixedtop/</id>
    <published>2018-05-31T10:23:24.000Z</published>
    <updated>2018-07-31T02:06:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>这个效果是一个项目中抽出来的一个demo效果。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2018/05/31/fixedtop/1.gif" alt="这里写图片描述" title="">                </div>                <div class="image-caption">这里写图片描述</div>            </figure><br>前期准备：</p><ol><li><p>引入jQ</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=&quot;https://cdn.bootcss.com/jquery/3.2.1/jquery.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><p>引入lodash.js</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install lodash -D</span><br></pre></td></tr></table></figure><p>fixTop.vue组件的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;fixtop2&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;header class=&quot;header&quot; ref=&quot;header&quot;&gt;&lt;/header&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div class=&quot;nav&quot; ref=&quot;nav&quot; :class=&quot;&#123;isFixed:isFixed&#125;&quot;&gt;</span><br><span class="line">      &lt;div class=&quot;box&quot; v-for=&quot;(item,index) in list&quot; :key=&quot;index&quot;&gt;</span><br><span class="line">        &#123;&#123;item.title&#125;&#125;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;ul class=&quot;content&quot;&gt;</span><br><span class="line">      &lt;li v-for=&quot;(item,index) in new Array(20)&quot; :key=&quot;index&quot;&gt;&#123;&#123;index+1&#125;&#125;&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line"></span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">var throttle = require(&apos;lodash/throttle&apos;); //从lodash中引入的throttle节流函数</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &apos;navScroll2&apos;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      list: [</span><br><span class="line">        &#123; title: &apos;AAAA&apos;, id: 1 &#125;,</span><br><span class="line">        &#123; title: &apos;BBBB&apos;, id: 2 &#125;,</span><br><span class="line">        &#123; title: &apos;CCCC&apos;, id: 3 &#125;,</span><br><span class="line">        &#123; title: &apos;DDDD&apos;, id: 4 &#125;,</span><br><span class="line">      ],</span><br><span class="line">      isFixed: false, //是否固定的</span><br><span class="line">      throttleScroll: null, //定义一个截流函数的变量</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    //滚动的函数</span><br><span class="line">    handleScroll() &#123;</span><br><span class="line">      let h = $(this.$refs.header).outerHeight(); //header的高度</span><br><span class="line">      let wh = $(window).scrollTop(); //滚动的距离的，为什么这里使用的jq，因为不用考虑的什么的兼容问题</span><br><span class="line">      let navH = $(this.$refs.nav).outerHeight(); //nav的高度</span><br><span class="line"></span><br><span class="line">      if (wh &gt; h) &#123;</span><br><span class="line">        this.isFixed = true;</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        this.isFixed = false;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  mounted() &#123;</span><br><span class="line">    //写在掉接口的里面的</span><br><span class="line">    this.$nextTick(() =&gt; &#123;</span><br><span class="line">      //这里使用监听的scroll的事件，为什么要使用的节流函数，如果不使用的，页面一直在滚动计算的，这样在</span><br><span class="line">      //使用手机时候，出现非常卡的，隔一段时间计算，大大降低了性能的消耗（具体的好处自己去查资料）</span><br><span class="line">      window.addEventListener(&apos;scroll&apos;, this.throttleScroll, false);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    this.throttleScroll = throttle(this.handleScroll, 100);</span><br><span class="line">  &#125;,</span><br><span class="line">  deactivated() &#123;</span><br><span class="line">    //离开页面需要remove这个监听器，不然还是卡到爆。</span><br><span class="line">    window.removeEventListener(&apos;scroll&apos;, this.throttleScroll);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class="line">.fixtop2 &#123;</span><br><span class="line">  min-height: 100vh;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.header &#123;</span><br><span class="line">  height: 5rem;</span><br><span class="line">  width: 100%;</span><br><span class="line">  background-color: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.nav &#123;</span><br><span class="line">  display: flex;</span><br><span class="line">  width: 100%;</span><br><span class="line">  background-color: pink;</span><br><span class="line">  &amp;.isFixed &#123;</span><br><span class="line">    position: fixed;</span><br><span class="line">    left: 0;</span><br><span class="line">    top: 0;</span><br><span class="line">    z-index: 9999;</span><br><span class="line">  &#125;</span><br><span class="line">  .box &#123;</span><br><span class="line">    font-size: 0.3rem;</span><br><span class="line">    padding: 0 0.3rem;</span><br><span class="line">    height: 0.9rem;</span><br><span class="line">    line-height: 0.9rem;</span><br><span class="line">    color: #333333;</span><br><span class="line">    flex: 1;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.content &#123;</span><br><span class="line">  height: 20rem;</span><br><span class="line">  li &#123;</span><br><span class="line">    width: 100%;</span><br><span class="line">    height: 1rem;</span><br><span class="line">    border-bottom: 1px solid #000;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这个效果是一个项目中抽出来的一个demo效果。&lt;br&gt;&lt;figure class=&quot;image-bubble&quot;&gt;
                &lt;div class=&quot;img-lightbox&quot;&gt;
                    &lt;div class=&quot;overl
      
    
    </summary>
    
    
      <category term="vue" scheme="http://alex.zhooson.cn/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>微信小程序解决多个视频播放的问题</title>
    <link href="http://alex.zhooson.cn/2018/05/31/min-video/"/>
    <id>http://alex.zhooson.cn/2018/05/31/min-video/</id>
    <published>2018-05-31T10:22:25.000Z</published>
    <updated>2018-07-31T02:06:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>效果图：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2018/05/31/min-video/1.gif" alt="这里写图片描述" title="">                </div>                <div class="image-caption">这里写图片描述</div>            </figure><p>本例子：是图片和多个视频混在一起</p><ul><li>html</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;view class=&quot;case-ul&quot;&gt;</span><br><span class="line">      &lt;repeat for=&quot;&#123;&#123;list&#125;&#125;&quot; index=&quot;index&quot; item=&quot;item&quot; key=&quot;key&quot;&gt;</span><br><span class="line">        &lt;view class=&quot;case-li case-view-item&quot;&gt;</span><br><span class="line">          &lt;image hidden=&quot;&#123;&#123;item.isPlaying&#125;&#125;&quot; style=&quot;&quot; class=&quot;case-picture&quot; src=&quot;&#123;&#123;item.path_url&#125;&#125;&quot; mode=&quot;scaleToFill&quot;&gt;&lt;/image&gt;</span><br><span class="line">          &lt;!-- 是视频 --&gt;</span><br><span class="line">          &lt;video wx:if=&quot;&#123;&#123;item.isPlaying&#125;&#125;&quot; id=&quot;video-&#123;&#123;index&#125;&#125;&quot; class=&quot;video&quot; src=&quot;&#123;&#123;item.video_url&#125;&#125;&quot; controls&gt;&lt;/video&gt;</span><br><span class="line">          &lt;image wx:if=&quot;&#123;&#123;item.type==1&#125;&#125;&quot; hidden=&quot;&#123;&#123;item.isPlaying&#125;&#125;&quot; class=&quot;bt&quot; mode=&quot;scaleToFill&quot; @tap=&quot;playVideo(&#123;&#123;item&#125;&#125;,&#123;&#123;index&#125;&#125;)&quot; src=&quot;./images/play-bt.png&quot;&gt;&lt;/image&gt;  &lt;!--前提一个播放的按钮--&gt;</span><br><span class="line">        &lt;/view&gt;</span><br><span class="line">      &lt;/repeat&gt;</span><br><span class="line">    &lt;/view&gt;</span><br></pre></td></tr></table></figure><ol><li>list是一个数组</li><li>type 后台给我一个标识，0：图片 。 1：视频</li><li>isPlaying 前台自己添加是否播放视频</li><li>path_url 图片的地址。视屏也会反一个封面截图，字段都是path_url</li></ol><ul><li>js<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">playVideo(item, index) &#123;</span><br><span class="line">  this.list.forEach(n =&gt; &#123;</span><br><span class="line">    n.isPlaying = false;</span><br><span class="line">  &#125;)</span><br><span class="line">  this.list[index].isPlaying = true;</span><br><span class="line">  let videoContext = wx.createVideoContext(`video-$&#123;index&#125;`)</span><br><span class="line">  videoContext.play()</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;效果图：&lt;/p&gt;
&lt;figure class=&quot;image-bubble&quot;&gt;
                &lt;div class=&quot;img-lightbox&quot;&gt;
                    &lt;div class=&quot;overlay&quot;&gt;&lt;/div&gt;
       
      
    
    </summary>
    
    
      <category term="miniprogram" scheme="http://alex.zhooson.cn/tags/miniprogram/"/>
    
  </entry>
  
  <entry>
    <title>微信小程序部分手机无法拨打电话的解决的方案</title>
    <link href="http://alex.zhooson.cn/2018/05/31/min-phone/"/>
    <id>http://alex.zhooson.cn/2018/05/31/min-phone/</id>
    <published>2018-05-31T10:21:17.000Z</published>
    <updated>2018-05-31T10:22:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>其他的代码省略，直接上js的代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">wx.makePhoneCall(&#123;</span><br><span class="line">       phoneNumber: message,</span><br><span class="line">       success()&#123;</span><br><span class="line">         console.log(&quot;拨打电话成功！&quot;)</span><br><span class="line">       &#125;,</span><br><span class="line">       fail(err)&#123;</span><br><span class="line">         console.log(&quot;222！&quot;,err)</span><br><span class="line">         //不能拨打电话，直接直接打印出err和能拨打电话的的取消按钮的err是不一样的</span><br><span class="line">         //wx.showModal(&#123;</span><br><span class="line">           //title: &apos;联系电话&apos;,</span><br><span class="line">           //content:err,</span><br><span class="line">           //showCancel:false</span><br><span class="line">         //&#125;)</span><br><span class="line"></span><br><span class="line">         if(err.errMsg == &apos;makePhoneCall:fail&apos;)&#123;</span><br><span class="line">           wx.showModal(&#123;</span><br><span class="line">             title: &apos;联系电话&apos;,</span><br><span class="line">             content:message,</span><br><span class="line">             showCancel:false</span><br><span class="line">           &#125;)</span><br><span class="line">         &#125;</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;)</span><br></pre></td></tr></table></figure><ul><li>能拨打电话直接拨打，不能拨打电话就直接的给出一个提示框（没有拨打电话的功能，只是展示的作用的）</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;其他的代码省略，直接上js的代码&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;
      
    
    </summary>
    
    
      <category term="miniprogram" scheme="http://alex.zhooson.cn/tags/miniprogram/"/>
    
  </entry>
  
  <entry>
    <title>jq 文字上下滚动</title>
    <link href="http://alex.zhooson.cn/2018/05/31/jq-scroll-characters/"/>
    <id>http://alex.zhooson.cn/2018/05/31/jq-scroll-characters/</id>
    <published>2018-05-31T10:20:37.000Z</published>
    <updated>2018-05-31T10:20:54.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;文字上下滚动轮播&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        * &#123;</span><br><span class="line">            margin: 0;</span><br><span class="line">            padding: 0;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .lunbo &#123;</span><br><span class="line">            position: relative;</span><br><span class="line">            width: 600px;</span><br><span class="line">            height: 50px;</span><br><span class="line">            border: 1px solid red;</span><br><span class="line">            overflow: hidden;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ul &#123;</span><br><span class="line">            position: absolute;</span><br><span class="line">            left: 0;</span><br><span class="line">            top: 0;</span><br><span class="line">            width: 600px;</span><br><span class="line">            height: auto;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ul li &#123;</span><br><span class="line">            width: 600px;</span><br><span class="line">            height: 50px;</span><br><span class="line">            line-height: 50px;</span><br><span class="line">            font-size: 20px;</span><br><span class="line">            color: #333;</span><br><span class="line">            text-align: center</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;ul class=&apos;lunbo&apos;&gt;</span><br><span class="line">&lt;li&gt;werw&lt;/li&gt;</span><br><span class="line">&lt;li&gt;werw&lt;/li&gt;</span><br><span class="line">&lt;li&gt;werw&lt;/li&gt;</span><br><span class="line">&lt;li&gt;werw&lt;/li&gt;</span><br><span class="line">&lt;li&gt;werw&lt;/li&gt;</span><br><span class="line">&lt;li&gt;werw&lt;/li&gt;</span><br><span class="line">&lt;li&gt;werw&lt;/li&gt;</span><br><span class="line">&lt;li&gt;werw&lt;/li&gt;</span><br><span class="line">&lt;li&gt;werw&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script src=&quot;https://cdn.bootcss.com/jquery/2.2.2/jquery.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  function lunbo(id, height) &#123;</span><br><span class="line">    var ul = $(id);</span><br><span class="line">    var liFirst = ul.find(&apos;li:first&apos;);</span><br><span class="line">    $(id).animate(&#123; top: height &#125;).animate(&#123; &quot;top&quot;: 0 &#125;, 0, function () &#123;</span><br><span class="line">      var clone = liFirst.clone();</span><br><span class="line">      $(id).append(clone);</span><br><span class="line">      liFirst.remove();</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  setInterval(&quot;lunbo(&apos;ul&apos;,&apos;-50px&apos;)&quot;, 1000)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class
      
    
    </summary>
    
    
      <category term="jquery" scheme="http://alex.zhooson.cn/tags/jquery/"/>
    
  </entry>
  
  <entry>
    <title>vue+swiper实现组件化开发</title>
    <link href="http://alex.zhooson.cn/2018/05/31/vue-swiper/"/>
    <id>http://alex.zhooson.cn/2018/05/31/vue-swiper/</id>
    <published>2018-05-31T10:19:26.000Z</published>
    <updated>2018-05-31T10:19:45.000Z</updated>
    
    <content type="html"><![CDATA[<ol><li>swiper的组件</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;swiper-container&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;swiper-wrapper&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;swiper-slide&quot; v-for=&quot;item in swiper&quot;&gt;&lt;img :src=&quot;item.room_src&quot; alt=&quot;&quot;&gt;&lt;/div&gt;</span><br><span class="line">            &lt;!--&lt;div class=&quot;swiper-slide&quot; v-for=&quot;item in test&quot;&gt;&lt;img :src=&quot;item.room_src&quot; alt=&quot;&quot;&gt;&lt;/div&gt;--&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  import Swiper from &apos;swiper&apos;</span><br><span class="line"></span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &apos;swiper&apos;,</span><br><span class="line">    data() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        mySwiper: null,</span><br><span class="line">//        test: [</span><br><span class="line">//          &quot;https://rpic.douyucdn.cn/acrpic/171024/288016_0921.jpg&quot;,</span><br><span class="line">//          &quot;https://rpic.douyucdn.cn/acrpic/171024/748396_0924.jpg&quot;,</span><br><span class="line">//          &quot;https://rpic.douyucdn.cn/acrpic/171024/453751_0922.jpg&quot;,</span><br><span class="line">//          &quot;https://rpic.douyucdn.cn/acrpic/171024/79663_0920.jpg&quot;</span><br><span class="line">//        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    props: [&apos;swiper&apos;],  //swiper的就是test这个数据传递来的</span><br><span class="line">    methods: &#123;</span><br><span class="line">      _initSwiper() &#123;</span><br><span class="line">        this.mySwiper = new Swiper(&apos;.swiper-container&apos;, &#123;</span><br><span class="line">          autoplay: 5000,//可选选项，自动滑动</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;,</span><br><span class="line">      _updateSwiper() &#123;</span><br><span class="line">        this.$nextTick(() =&gt; &#123;</span><br><span class="line">          this.mySwiper.update(true);  //swiper update的方法</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;,</span><br><span class="line">      swiperUpdate() &#123;</span><br><span class="line">        if (this.mySwiper) &#123; //节点存在</span><br><span class="line">          this._updateSwiper(); //更新</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">          this._initSwiper(); //创建</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    watch: &#123;</span><br><span class="line">      //通过props传来的数据 和 组件一加载节点就创建成功 二者不是同步，实时监听的swiper(传递的值)的变化</span><br><span class="line">      swiper() &#123;</span><br><span class="line">        this.swiperUpdate();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    mounted() &#123;</span><br><span class="line">      this.swiperUpdate(); //页面一加载拉去数据创建节点</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class="line">    .swiper-container &#123;</span><br><span class="line">        width: 100%;</span><br><span class="line">        height: 4rem;</span><br><span class="line">        margin-top: 0.9rem;</span><br><span class="line">        .swiper-wrapper &#123;</span><br><span class="line">            width: 100%;</span><br><span class="line">            height: 100%;</span><br><span class="line">            .swiper-slide &#123;</span><br><span class="line">                background-size: cover;</span><br><span class="line">                width: 100%;</span><br><span class="line">                height: 4rem;</span><br><span class="line">                img &#123;</span><br><span class="line">                    width: 100%;</span><br><span class="line">                    height: 100%;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li>home.vue 调用的组件方法</li></ol><p>//html</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;swiper :swiper=&quot;roomList.slice(6,10)&quot; &gt;&lt;/swiper&gt;</span><br></pre></td></tr></table></figure><p>//js</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> import swiper from &apos;components/swiper/swiper&apos;</span><br><span class="line"></span><br><span class="line">components: &#123;</span><br><span class="line">     swiper</span><br><span class="line">   &#125;,</span><br></pre></td></tr></table></figure><p>问题：如果单纯的调用_initSwiper的方法，会发现页面是不能滚动的，但是页面随便修改东西，然后保存的swiper又可以滚动的，这个个原因是初始swiper的节点没有创建成功，值页面有穿进去的，一层一层的可以打印swiper的值为空的，当修改东西值就能传递进去的，所以的这里的我们需要通过判断节点是否成功来update siwper的方法</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;swiper的组件&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=
      
    
    </summary>
    
    
      <category term="vue plugins" scheme="http://alex.zhooson.cn/tags/vue-plugins/"/>
    
  </entry>
  
  <entry>
    <title>webpack，vue，图片(懒加载)之间关系</title>
    <link href="http://alex.zhooson.cn/2018/05/31/vue-wepack-image/"/>
    <id>http://alex.zhooson.cn/2018/05/31/vue-wepack-image/</id>
    <published>2018-05-31T10:13:28.000Z</published>
    <updated>2018-05-31T10:13:43.000Z</updated>
    
    <content type="html"><![CDATA[<p>以vue来解释</p><ul><li><p>例子1 (获取的背景图)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div v-for=&apos;item,index in list&apos;&gt;</span><br><span class="line">&lt;div class=&apos;demo&apos; :style=&quot;&#123;backgroundImage:`url($&#123;item.cover&#125;)`&#125;&quot; &gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></li><li><p>例子2 （获取的图片）</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div v-for=&apos;item,index in list&apos;&gt;</span><br><span class="line">&lt;img :src=&quot;item.cover&quot;&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><ul><li>例子3 （本地的图片的）</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div v-for=&apos;item,index in new Array(5)&apos;&gt;</span><br><span class="line">&lt;img :src=&quot;`$&#123;require(`src/assets/images/img-$&#123;index+1&#125;.png`)&#125;`&quot;&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><ul><li>例子4 （本地的背景图）</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div v-for=&apos;item,index in new Array(5)&apos;&gt;</span><br><span class="line">&lt;div class=&quot;img-kinds&quot; :style=&quot;&#123;backgroundImage:`url($&#123;require(`./images/img-$&#123;index&#125;@2x.png`)&#125;)`&#125;&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><ul><li><a href="https://www.npmjs.com/package/vue-lazyload" target="_blank" rel="noopener">懒加载文档</a><br>//main.js<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install  vue-lazyload -D</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import VueLazyload from &apos;vue-lazyload&apos;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Vue.use(VueLazyload, &#123;</span><br><span class="line">  preLoad: 1.3,</span><br><span class="line">  error: require(&apos;src/assets/fileloaderassets/lazy-image.jpg&apos;),</span><br><span class="line">  loading: require(&apos;src/assets/fileloaderassets/lazy-image.jpg&apos;),</span><br><span class="line">  attempt: 1</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=avatar v-lazy:background-image=&quot;`$&#123;item.cover&#125;`&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img v-lazy=&apos;item.avatar&apos;  /&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;以vue来解释&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;例子1 (获取的背景图)&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;b
      
    
    </summary>
    
    
      <category term="vue" scheme="http://alex.zhooson.cn/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>教你在微信中给Vue单页应用设置标题</title>
    <link href="http://alex.zhooson.cn/2018/05/31/setTitle/"/>
    <id>http://alex.zhooson.cn/2018/05/31/setTitle/</id>
    <published>2018-05-31T10:12:26.000Z</published>
    <updated>2018-05-31T10:12:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>原因：</p><ol><li>设置title，解决微信改不了title的bug</li><li>可以给每个页面设置标题<br>实现的方法如下，新建文件<br>assets/script/settiltle.js</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> 1. 设置title，解决微信改不了title的bug</span><br><span class="line"> */</span><br><span class="line">export default function setTitle(title) &#123;</span><br><span class="line">  document.title = title;</span><br><span class="line">  let userAgent = window.navigator.userAgent.toLowerCase();</span><br><span class="line">  let isiOS = userAgent.indexOf(&apos;applewebkit&apos;) &gt;= 0;</span><br><span class="line">  let isWechat = userAgent.indexOf(&apos;micromessenger&apos;) &gt;= 0;</span><br><span class="line">  if (isiOS &amp;&amp; isWechat) &#123;</span><br><span class="line">    let iframe = document.createElement(&apos;iframe&apos;);</span><br><span class="line">    iframe.src = &apos;https://www.baidu.com/favicon.ico&apos;;</span><br><span class="line">    iframe.style.display = &apos;none&apos;;</span><br><span class="line">    document.body.appendChild(iframe);</span><br><span class="line">    iframe.onload = function() &#123;</span><br><span class="line">      setTimeout(function() &#123;</span><br><span class="line">        iframe.remove();</span><br><span class="line">      &#125;, 0)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>// main.js<br> 先引入的settitle的js的文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import setTitle from &apos;../assets/script/settitle.js&apos;; // 设置页面标题</span><br><span class="line">window.setTitle = setTitle //挂在window的上面。全局可直接使用的额</span><br></pre></td></tr></table></figure><p>有俩中实现的方法来修改title的<br>一：既然上面的已经挂在的window的上面了，每个组件就可以在在mounted,created,activated等钩子中设置title的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setTitle（&apos;我是标题&apos;）</span><br></pre></td></tr></table></figure><p>二：监听的路由的变化的，对页面的titile进行实时的更改的<br>对路由稍作修改如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">const router = new Router(&#123;</span><br><span class="line"> routes: [</span><br><span class="line">     &#123;</span><br><span class="line">      path: &apos;/solution/andiosfixed&apos;,</span><br><span class="line">      name: &apos;andiosfixed&apos;,</span><br><span class="line">      meta: &#123;</span><br><span class="line">        title: &apos;ios对fixed兼容&apos;, //重点在meta的这里，其他的都是例子的</span><br><span class="line">      &#125;,</span><br><span class="line">      component: AndIosFixed</span><br><span class="line">    &#125; ]</span><br><span class="line">    &#125;）</span><br></pre></td></tr></table></figure><p><a href="https://router.vuejs.org/zh-cn/advanced/meta.html" target="_blank" rel="noopener">vue-router meta的介绍</a>   &lt;===<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// 路由变化</span><br><span class="line">router.afterEach(function (to) &#123;</span><br><span class="line">  if (to.meta &amp;&amp; to.meta.title) &#123;</span><br><span class="line">    //console.info(to.meta.title)</span><br><span class="line">    setTitle(to.meta.title);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">export default router;</span><br></pre></td></tr></table></figure></p><p><a href="https://router.vuejs.org/zh-cn/advanced/navigation-guards.html" target="_blank" rel="noopener">vue-router afterEach的介绍</a></p><p>以上的2中方法可以实现的安卓和ios的微信修改title的方法，如您有更好的建议和意见请留言，谢谢支持。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;原因：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;设置title，解决微信改不了title的bug&lt;/li&gt;
&lt;li&gt;可以给每个页面设置标题&lt;br&gt;实现的方法如下，新建文件&lt;br&gt;assets/script/settiltle.js&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;hi
      
    
    </summary>
    
    
      <category term="vue" scheme="http://alex.zhooson.cn/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>vue 微信分享的实现</title>
    <link href="http://alex.zhooson.cn/2018/05/31/vue-share/"/>
    <id>http://alex.zhooson.cn/2018/05/31/vue-share/</id>
    <published>2018-05-31T10:11:54.000Z</published>
    <updated>2018-05-31T10:12:09.000Z</updated>
    
    <content type="html"><![CDATA[<ol><li>新建 assets/script/wecaht.share.js</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">function getScript() &#123;</span><br><span class="line">  return new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line"></span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">      url: &apos;https://res.wx.qq.com/open/js/jweixin-1.0.0.js&apos;,</span><br><span class="line">      dataType: &quot;script&quot;,</span><br><span class="line">      cache : true,</span><br><span class="line">    &#125;).done(function() &#123;</span><br><span class="line">      resolve(window.wx)</span><br><span class="line">    &#125;)</span><br><span class="line">    .fail(function(error) &#123;</span><br><span class="line">      reject( error );</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function act() &#123;</span><br><span class="line">  return new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">    // console.log(window.location.href)</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">      url: &apos;http://wechat.demo.com/token/getWechat&apos;,//后台索要的算法签名</span><br><span class="line">      // type: &apos;get&apos;,</span><br><span class="line">      dataType: &apos;jsonp&apos;,</span><br><span class="line">      data: &#123;</span><br><span class="line">        url: encodeURIComponent(window.location.href.split(&apos;#&apos;)[0]),</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;).done(function(ret) &#123;</span><br><span class="line">      resolve(ret)</span><br><span class="line">    &#125;).fail(function(ret) &#123;</span><br><span class="line">        reject( ret );</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">export function wechatShare(shareDate) &#123;</span><br><span class="line">  return new Promise(async function(resolve, reject) &#123;</span><br><span class="line"></span><br><span class="line">    try&#123;</span><br><span class="line">      let isWechat=navigator.userAgent.indexOf(&apos;MicroMessenger&apos;)&gt;-1 //判断为微信浏览器</span><br><span class="line">      if(!isWechat)&#123;</span><br><span class="line">        return resolve(&apos;not weichat&apos;)</span><br><span class="line">      &#125;</span><br><span class="line">      if(!window.wx)&#123;</span><br><span class="line">        await getScript();</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      var defaultData = &#123;</span><br><span class="line">        title: `分享的标题`,</span><br><span class="line">        content: `内容`,</span><br><span class="line">        link: `$&#123;window.location.href&#125;`,</span><br><span class="line">        logo: `$&#123;require(&apos;../images/share.png&apos;)&#125;`, //分享出来的图片的</span><br><span class="line">        success: function (res) &#123;</span><br><span class="line"></span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;</span><br><span class="line">      let data = &#123; ...defaultData, ...shareDate &#125;</span><br><span class="line">      let ret = await act()</span><br><span class="line">      wx.config($.extend(&#123;</span><br><span class="line">        // debug:1,</span><br><span class="line">        jsApiList: [&apos;onMenuShareAppMessage&apos;, &apos;onMenuShareTimeline&apos;],</span><br><span class="line">      &#125;, ret))</span><br><span class="line"></span><br><span class="line">      wx.ready(function () &#123;</span><br><span class="line">        wx.onMenuShareTimeline(&#123;</span><br><span class="line">          title: data.content,</span><br><span class="line">          desc: &apos;&apos;,</span><br><span class="line">          link: data.link,</span><br><span class="line">          imgUrl: data.logo,</span><br><span class="line">          dataUrl: &apos;&apos;,</span><br><span class="line">          success: data.success,</span><br><span class="line">          cancel: function () &#123;&#125;,</span><br><span class="line">        &#125;)</span><br><span class="line">        wx.onMenuShareAppMessage(&#123;</span><br><span class="line">          title: data.title,</span><br><span class="line">          desc: data.content,</span><br><span class="line">          link: data.link,</span><br><span class="line">          imgUrl: data.logo,</span><br><span class="line">          dataUrl: &apos;&apos;,</span><br><span class="line">          success: data.success,</span><br><span class="line">          cancel: function () &#123;&#125;,</span><br><span class="line">        &#125;)</span><br><span class="line">        wx.onMenuShareQQ(&#123;</span><br><span class="line">          title: data.title,</span><br><span class="line">          desc: data.content,</span><br><span class="line">          link: data.link,</span><br><span class="line">          imgUrl: data.logo,</span><br><span class="line">          dataUrl: &apos;&apos;,</span><br><span class="line">          success: data.success,</span><br><span class="line">          cancel: function () &#123;&#125;,</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line">    &#125;catch(error)&#123;</span><br><span class="line">      reject( error );</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>main.js</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import &#123; wechatShare &#125; from &apos;src/assets/scripts/wechat.share&apos;; //这里我脚手架配置过Alias，没有配过可直接相对路径来寻找</span><br><span class="line">window.wechatShare  = wechatShare</span><br></pre></td></tr></table></figure><ol start="3"><li>每个组件的调用方法</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">wechatShare(&#123;</span><br><span class="line">title: &apos;组件的标题&apos;,</span><br><span class="line"> content: &apos;内容&apos;,</span><br><span class="line"> link: `$&#123;window.location.origin&#125;/user/collegeIndex`,</span><br><span class="line"> logo: `$&#123;require(&apos;src/assets/images/share.png&apos;)&#125;`,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;新建 assets/script/wecaht.share.js&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1
      
    
    </summary>
    
    
      <category term="vue" scheme="http://alex.zhooson.cn/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>vue 如何给每个页面添加一个全局的className</title>
    <link href="http://alex.zhooson.cn/2018/05/31/vue-global-classname/"/>
    <id>http://alex.zhooson.cn/2018/05/31/vue-global-classname/</id>
    <published>2018-05-31T10:11:21.000Z</published>
    <updated>2018-07-31T02:06:58.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li>main.js</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">const router = new Router(&#123;   //对官方的脚手架做出部分修改</span><br><span class="line">  mode: &apos;hash&apos;, // [&apos;history&apos;, &apos;hash&apos;]</span><br><span class="line">  linkActiveClass: &apos;active&apos;, // active class 名称</span><br><span class="line">  scrollBehavior(to, from, savedPosition) &#123; // 后退页面时, 保留滚动位置</span><br><span class="line">    if (savedPosition) &#123;</span><br><span class="line">      return savedPosition;</span><br><span class="line">    &#125;</span><br><span class="line">    return &#123; x: 0, y: 0 &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  //路由</span><br><span class="line">  routes: [</span><br><span class="line">    &#123;</span><br><span class="line">      path: &apos;/solution&apos;,</span><br><span class="line">      component: Question,</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">      path: &apos;/solution/question&apos;,</span><br><span class="line">      name: &apos;question&apos;,</span><br><span class="line">      component: Question,</span><br><span class="line">    &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//这才是重点。。。。</span><br><span class="line">router.beforeEach((to, from, next) =&gt; &#123;</span><br><span class="line">  // html加class ==&gt;给每个组件添加一个className ，min-height：100vh；有些手机是不兼容</span><br><span class="line">  //使用方法：html-路由的名称 组成的一个className：height:100%;width:100%; 全屏充满</span><br><span class="line">  //这个className的查看方法 控制台 Element 即可</span><br><span class="line">    const fromName = from.name || &apos;&apos;;</span><br><span class="line">    const toName = to.name || &apos;&apos;;</span><br><span class="line">    if (fromName) &#123;</span><br><span class="line">      document.documentElement.classList.remove(`html-$&#123;fromName&#125;`); //remove className</span><br><span class="line">    &#125;</span><br><span class="line">    document.documentElement.classList.add(`html-$&#123;toName&#125;`);  //add className</span><br><span class="line">  next();</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">export default router;</span><br></pre></td></tr></table></figure><ul><li><p>查看的方法</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2018/05/31/vue-global-classname/1.jpeg" alt="这里写图片描述" title="">                </div>                <div class="image-caption">这里写图片描述</div>            </figure><p>用法：<br>question组件中：</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;style lang=&apos;scss&apos; scoped&gt;</span><br><span class="line">.html-question &#123; //充满当前整个屏幕</span><br><span class="line">height:100%;</span><br><span class="line">width:100%;</span><br><span class="line">background-color:red;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>充满当前整个屏幕 还有另外一种方法（如下）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;style lang=&apos;scss&apos; scoped&gt;</span><br><span class="line">.question &#123; //不是全局的cssName</span><br><span class="line">min-height:100vh; //不是所有的版本都兼容这个写法 。上面的方法万能的</span><br><span class="line">width:100%;</span><br><span class="line">background-color:red;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;main.js&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;l
      
    
    </summary>
    
    
      <category term="vue" scheme="http://alex.zhooson.cn/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>vue 列表滑动加载数据</title>
    <link href="http://alex.zhooson.cn/2018/05/31/vue-scroll-load-data/"/>
    <id>http://alex.zhooson.cn/2018/05/31/vue-scroll-load-data/</id>
    <published>2018-05-31T10:10:27.000Z</published>
    <updated>2018-07-31T02:07:02.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2018/05/31/vue-scroll-load-data/1.gif" alt="这里写图片描述" title="">                </div>                <div class="image-caption">这里写图片描述</div>            </figure><ul><li>这个组件使用了<a href="http://fontawesome.dashgame.com/" target="_blank" rel="noopener">http://fontawesome.dashgame.com/</a> 的loading的效果</li></ul><p>//main.js 入口文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import axios from &apos;axios&apos;</span><br><span class="line">// Vue.prototype.axios = axios 组件调用this.axios.get(...)</span><br><span class="line">// Vue.prototype.$ajax = axios  换个名字 组件调用this.$ajax.get(...)</span><br><span class="line">window.axios = axios;  //组件中调用 axios.get(...)</span><br></pre></td></tr></table></figure><p>//loadmore.vue 组件（我配置的是sass语法，望悉知！！）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;loadmore&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;header class=&quot;header&quot;&gt;滑动-加载更多&lt;/header&gt;</span><br><span class="line"></span><br><span class="line">    &lt;ul class=&quot;ul&quot;&gt;</span><br><span class="line">      &lt;li class=&quot;list&quot; v-for=&quot;(item,index) in list&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;list-left&quot;&gt;&#123;&#123;index + 1&#125;&#125;&lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;list-center&quot;&gt;</span><br><span class="line">          &lt;div class=&quot;msg&quot;&gt;&#123;&#123;item.title&#125;&#125;&lt;/div&gt;</span><br><span class="line">          &lt;div class=&quot;time&quot;&gt;时间：&#123;&#123;item.create_at&#125;&#125;&lt;/div&gt;</span><br><span class="line">          &lt;div class=&quot;author&quot;&gt;作者：&#123;&#123;item.author.loginname&#125;&#125;&lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div class=&quot;loadmore-icon&quot;&gt;加载更多&lt;i class=&quot;fa fa-cog fa-spin&quot;&gt;&lt;/i&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;loading&quot; v-show=&quot;showlaoding&quot;&gt;</span><br><span class="line">      &lt;i class=&quot;fa fa-spinner fa-spin fa-3x fa-fw margin-bottom&quot;&gt;&lt;/i&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &apos;loadmore2&apos;,</span><br><span class="line">    data() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        list: [],//数据</span><br><span class="line">        page: 1,//页码</span><br><span class="line">        showlaoding: true //是否显示loading效果</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      getData(page) &#123;</span><br><span class="line">        this.showlaoding = true</span><br><span class="line">        axios.get(&apos;https://cnodejs.org/api/v1/topics&apos;, &#123;</span><br><span class="line">          params: &#123;</span><br><span class="line">            page: page,</span><br><span class="line">            limit: 10</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">          .then((res) =&gt; &#123;</span><br><span class="line">            if (res.status == 200) &#123;</span><br><span class="line">              let list = res.data.data</span><br><span class="line">              list.map(n =&gt; this.list.push(n))</span><br><span class="line">              this.list.forEach(n =&gt; &#123;</span><br><span class="line">                const d = new Date(n.create_at)</span><br><span class="line">                n.create_at = `$&#123;d.getFullYear()&#125;-$&#123;d.getMonth() + 1&#125;-$&#123;d.getDate()&#125;`</span><br><span class="line">              &#125;)</span><br><span class="line">              this.showlaoding = false</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;)</span><br><span class="line">          .catch((error) =&gt; &#123;</span><br><span class="line">            console.log(error);</span><br><span class="line">          &#125;);</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">    ,</span><br><span class="line">    mounted() &#123;</span><br><span class="line">      this.getData(this.page);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      // 注册scroll事件并监听</span><br><span class="line">      window.addEventListener(&apos;scroll&apos;, () =&gt; &#123;</span><br><span class="line">        console.info(&apos;可视区域大小&apos; + document.documentElement.clientHeight + &apos;........&apos; + window.innerHeight)</span><br><span class="line">        //console.info(&apos;滚动高度&apos; + document.body.scrollTop) //原生的方法存在的兼容性问题 mac上面就计算出来是0</span><br><span class="line">var scrollTop = document.documentElement.scrollTop || window.pageYOffset || document.body.scrollTop;</span><br><span class="line"></span><br><span class="line">        console.info(&apos;文档高度&apos; + document.body.offsetHeight)</span><br><span class="line"></span><br><span class="line">        //判断是否滚动到底部</span><br><span class="line">        if (scrollTop + window.innerHeight + 0&gt;= document.body.offsetHeight) &#123; //0 表示距离底部多少的距离的开始触发loadmore效果</span><br><span class="line">          if (!this.showlaoding) &#123; //防止多次加载</span><br><span class="line">            this.getData(this.page += 1)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">／／原生的方法存在浏览器兼容的问题的，最好的办法就是的是jq大法，不需要考虑的兼容新的问题的</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class="line">  .loadmore &#123;</span><br><span class="line">    min-height: 100vh;</span><br><span class="line">    width: 100%;</span><br><span class="line">    padding-top: 0.8rem;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .header &#123;</span><br><span class="line">    position: fixed;</span><br><span class="line">    top: 0;</span><br><span class="line">    left: 0;</span><br><span class="line">    right: 0;</span><br><span class="line">    height: 0.8rem;</span><br><span class="line">    display: flex;</span><br><span class="line">    align-items: center;</span><br><span class="line">    justify-content: center;</span><br><span class="line">    background-color: green;</span><br><span class="line">    color: #ffffff;</span><br><span class="line">    font-size: 0.32rem;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .ul &#123;</span><br><span class="line">    width: 100%;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .list &#123;</span><br><span class="line">    padding: 0.3rem;</span><br><span class="line">    display: flex;</span><br><span class="line">    position: relative;</span><br><span class="line">    &amp;:last-child &#123;</span><br><span class="line">      &amp;:after &#123;</span><br><span class="line">        display: none;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &amp;:after &#123;</span><br><span class="line">      content: &apos;&apos;;</span><br><span class="line">      display: block;</span><br><span class="line">      left: 0.3rem;</span><br><span class="line">      right: 0;</span><br><span class="line">      bottom: 0;</span><br><span class="line">      background-color: #dfdfdf;</span><br><span class="line">      height: 1px;</span><br><span class="line">      width: 100%;</span><br><span class="line">      position: absolute;</span><br><span class="line">    &#125;</span><br><span class="line">    .list-left &#123;</span><br><span class="line">      width: 0.5rem;</span><br><span class="line">    &#125;</span><br><span class="line">    .list-center &#123;</span><br><span class="line">      flex: 1;</span><br><span class="line">      padding-left: 0.2rem;</span><br><span class="line">      margin-right: 0.5rem;</span><br><span class="line">      .msg &#123;</span><br><span class="line">        font-size: 0.3rem;</span><br><span class="line">        font-weight: 900;</span><br><span class="line">      &#125;</span><br><span class="line">      .author &#123;</span><br><span class="line">        margin-top: 0.1rem;</span><br><span class="line">      &#125;</span><br><span class="line">      .time &#123;</span><br><span class="line">        margin-top: 0.1rem;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .loadmore-icon &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    align-items: center;</span><br><span class="line">    justify-content: center;</span><br><span class="line">    background-color: #f8f8f8;</span><br><span class="line">    padding: 0.2rem 0;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .loading &#123;</span><br><span class="line">    position: fixed;</span><br><span class="line">    left: 0;</span><br><span class="line">    right: 0;</span><br><span class="line">    top: 0;</span><br><span class="line">    bottom: 0;</span><br><span class="line">    background-color: rgba(#000, .3);</span><br><span class="line">    display: flex;</span><br><span class="line">    align-items: center;</span><br><span class="line">    justify-content: center;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;image-bubble&quot;&gt;
                &lt;div class=&quot;img-lightbox&quot;&gt;
                    &lt;div class=&quot;overlay&quot;&gt;&lt;/div&gt;
                   
      
    
    </summary>
    
    
      <category term="vue" scheme="http://alex.zhooson.cn/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>vue 兄弟组件之间的通讯</title>
    <link href="http://alex.zhooson.cn/2018/05/31/eventBus/"/>
    <id>http://alex.zhooson.cn/2018/05/31/eventBus/</id>
    <published>2018-05-31T10:09:17.000Z</published>
    <updated>2018-05-31T10:09:30.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li>新建src/bus.js</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import Vue from &apos;vue&apos;</span><br><span class="line">var bus = new Vue()</span><br><span class="line">export default bus</span><br></pre></td></tr></table></figure><p>组件A：</p><ol><li>引入文件(注意文件路径)<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import bus from &apos;../../bus.js&apos;</span><br></pre></td></tr></table></figure></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bus.$emit(&apos;avatar&apos;, &apos;我是大哥&apos;)</span><br></pre></td></tr></table></figure><p>组件B：</p><ol><li>引入文件(注意文件路径)<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import bus from &apos;../../bus.js&apos;</span><br></pre></td></tr></table></figure></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bus.$on(&apos;avatar&apos;, (val)=&gt;&#123;</span><br><span class="line">console.info(val) //我是大哥</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;新建src/bus.js&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span cla
      
    
    </summary>
    
    
      <category term="vue" scheme="http://alex.zhooson.cn/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>vue 遮罩层阻止默认滚动事件</title>
    <link href="http://alex.zhooson.cn/2018/05/31/stopscroll/"/>
    <id>http://alex.zhooson.cn/2018/05/31/stopscroll/</id>
    <published>2018-05-31T10:08:25.000Z</published>
    <updated>2018-05-31T10:08:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>针对vue项目中的操作：</p><p>####vue 遮罩层阻止默认滚动事件</p><p>在写移动端页面的时候,弹出遮罩层后，我们仍然可以滚动页面。<br>vue中提供 @touchmove.prevent 方法可以完美解决这个问题</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;dialog&quot; @touchmove.prevent &gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>第二种方法：</p><ul><li>需要引入的jq大法。</li><li>点击弹出层的click事件时候，添加代码（给html和body添加一个className）</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$(&apos;html&apos;).addClass(&apos;html-share&apos;);</span><br><span class="line">$(&apos;body&apos;).addClass(&apos;body-share&apos;);</span><br></pre></td></tr></table></figure><p>关闭弹出层事件，添加代码（移除这个className）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$(&apos;html&apos;).removeClass(&apos;html-share&apos;);</span><br><span class="line">$(&apos;body&apos;).removeClass(&apos;body-share&apos;);</span><br></pre></td></tr></table></figure><p>对应的css（这个css才是关键点）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.html-share,.body-share &#123;</span><br><span class="line">  overflow: hidden;</span><br><span class="line">  height: 100%;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;针对vue项目中的操作：&lt;/p&gt;
&lt;p&gt;####vue 遮罩层阻止默认滚动事件&lt;/p&gt;
&lt;p&gt;在写移动端页面的时候,弹出遮罩层后，我们仍然可以滚动页面。&lt;br&gt;vue中提供 @touchmove.prevent 方法可以完美解决这个问题&lt;/p&gt;
&lt;figure class=
      
    
    </summary>
    
    
      <category term="vue" scheme="http://alex.zhooson.cn/tags/vue/"/>
    
  </entry>
  
</feed>
